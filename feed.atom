<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>http://ewinnington.github.io/</id>
	<title>Eric Winnington</title>
	<link rel="self" href="http://ewinnington.github.io/" />
	<rights>2023</rights>
	<updated>2023-04-22T12:39:58Z</updated>
	<subtitle>A collection of thoughts, code and snippets.</subtitle>
	<entry>
		<id>http://ewinnington.github.io/posts/network-vpn</id>
		<title>Network planning and VPN</title>
		<link href="http://ewinnington.github.io/posts/network-vpn" />
		<updated>2023-04-20T18:40:00Z</updated>
		<content>&lt;p&gt;I am in the process of setting up my homelab network between my two locations.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/network/network.png" class="img-fluid" width="100%" alt="Network" /&gt;&lt;/p&gt;
&lt;h2 id="zone-z"&gt;Zone Z&lt;/h2&gt;
&lt;p&gt;Z has a single fiber connection via Swisscom to internet.&lt;/p&gt;
&lt;h3 id="inventory"&gt;Inventory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DeepThread is an AMD Threadripper 1920x running Windows 10.&lt;/li&gt;
&lt;li&gt;Minis3 and Minis4 are the Beelink MiniS12 N95s running Ubuntu Server 23.04.&lt;/li&gt;
&lt;li&gt;NAS is an an older QNAP TS-269L&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vpn"&gt;VPN&lt;/h3&gt;
&lt;p&gt;With a L2TP VPN connection configured to allow remote access onto the network, so I can get Red (Surface Laptop) and Xr (iPhone) onto the network in case.&lt;/p&gt;
&lt;h2 id="zone-n"&gt;Zone N&lt;/h2&gt;
&lt;p&gt;N has two connections, a Starlink (v1 round) with only the powerbrick router and Sosh as a backup DSL provider (with an ADSL Router) both connected to a Ubiquity UDM-PRO-SE in Failover mode. Getting a VPN to N is a little more involved, since the UDM is behind a separate router on each WAN.&lt;/p&gt;
&lt;h3 id="inventory-1"&gt;Inventory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minis1 is the Beelink MiniS12 N95s running Windows 11. Planned to Switch to Ubuntu 23.04, but enjoying it VESA mounted behind a screen in the office currently.&lt;/li&gt;
&lt;li&gt;Minis2 is the Beelink MiniS12 N95s running Ubuntu Server 23.04. Currently rackmounted with the UDM-PRO.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vpn-1"&gt;VPN&lt;/h3&gt;
&lt;p&gt;On the UDM-PRO, a VPN is configured with Ubiquity and I can use the iOS application WifiMan to access the network.
On Minis2, a &lt;a href="https://github.com/cloudflare/cloudflared"&gt;cloudflared docker&lt;/a&gt; is running, reaching up to Cloudflare and providing an Zero trust tunnel to expose several dockerized websites hosted on it.&lt;/p&gt;
&lt;h1 id="the-issue-at-hand"&gt;The issue at hand&lt;/h1&gt;
&lt;p&gt;I would like the N Minis1 &amp;amp; Minis2 to be able to access the Z NAS, ideally with a relatively simple connection that I can leave running all the time, to be able to pull files from the NAS and ideally also access the NAS's front-end application from inside my N location. I could connect to the SwisscomVPN every time I do something that requires connectivity to the NAS, but I would really ideally like a more permanent solution where I make the Z NAS &amp;quot;visible&amp;quot; in the N network. Or go full and establish a site-to-site VPN and simply make the two areas N and Z communicate seamlessly while still having local connectivity.&lt;/p&gt;
&lt;p&gt;Do you have any suggestions as to how best to accomplish this?&lt;/p&gt;
&lt;h2 id="section"&gt;22.04.2023&lt;/h2&gt;
&lt;p&gt;I now put a OpenVPN on the Qnap NAS to act as a S2S VPN. Not sure that will be the solution I keep for the long term but it works for now.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/network/network2.drawio.svg" class="img-fluid" width="100%" alt="Network" /&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I am in the process of setting up my homelab network between my two locations.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/mini-pc</id>
		<title>The era of the sub $200 PC</title>
		<link href="http://ewinnington.github.io/posts/mini-pc" />
		<updated>2023-04-05T00:00:00Z</updated>
		<content>&lt;p&gt;I recently purchased (arrived yesterday!) two mini PCs, for 170.- CHF each (~$187). They sport the latest low power CPU from Intel, the N95, which is amazingly efficient, powerful and cheap.&lt;/p&gt;
&lt;p&gt;The Beelink Mini S12 with the N95 intel CPU 4c, 16 GB Ram, 512 GB NVME storage drive, with space for an additional 2.5&amp;quot; SSD inside too. Amazingly small and light to carry around.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/minipc.jpg" class="img-fluid" width="80%" alt="" /&gt;
(coffee cup for scale)&lt;/p&gt;
&lt;p&gt;I just got two of these to put in a Kubernetes cluster, and I've been playing around with them and they are super impressive. They pack a punch and sip power at 9-20W. The internal video card does 4k youtube playback without any issue.&lt;/p&gt;
&lt;p&gt;Windows 11 comes included with the machine for the price. I've already put ubuntu server on one of them. These machines are powerful enough for family members to do all their online activities, zoom (with a webcam), or use as a media machine.&lt;/p&gt;
&lt;p&gt;Over the next weeks, I'll be documenting configuring them and setting them up to serve as highly available servers from my home, using a reverse VPN tunneling.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I recently purchased (arrived yesterday!) two mini PCs, for 170.- CHF each (~$187). They sport the latest low power CPU from Intel, the N95, which is amazingly efficient, powerful and cheap.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/learn-from-chatgpt-Crdt-OT</id>
		<title>Learning concepts from chatGPT - Operational Transform and Conflict-free Replicated Data Types</title>
		<link href="http://ewinnington.github.io/posts/learn-from-chatgpt-Crdt-OT" />
		<updated>2022-12-11T00:20:00Z</updated>
		<content>&lt;p&gt;I have been enjoying using &lt;a href="https://chat.openai.com/chat"&gt;chatGPT&lt;/a&gt; as a private tutor / reference on topics. My biggest issue is now keeping up with the knowledge and asking the right questions.&lt;/p&gt;
&lt;p&gt;But, remember that chatGPT is not all knowing and can get things wrong - even fabulating, so you have to double check the information. I did my best to validate the information with &lt;a href="https://mwhittaker.github.io/consistency_in_distributed_systems/3_crdt.html"&gt;Conflict-Free Replicated Data Types&lt;/a&gt;, &lt;a href="https://svn.apache.org/repos/asf/incubator/wave/whitepapers/operational-transform/operational-transform.html"&gt;Google's OT papers&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Operational_transformation"&gt;Wikipedia on Operational Transformation&lt;/a&gt;. I did not find any glaring errors in the text. For future crawlers, &lt;strong&gt;the following text was generated by chatGPT on 2022-12-11T01:12:45+0000&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; is used for the prompts I send into chatGPT.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;italics&lt;/em&gt; is for my comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;can you explain CRDT's in data structures?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Sure! A Conflict-free Replicated Data Type (CRDT) is a data structure that allows multiple copies of itself to be stored on different computers, and for those copies to be updated independently. This means that even when the copies are not connected to each other, they can still be updated and changed, and when they are eventually reconnected, they will automatically merge any conflicting changes in a way that preserves the consistency of the data. This makes CRDTs very useful for building distributed systems that need to be resilient to network outages and other forms of partial failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is this similar to Google Wave's Operational Transform?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Yes, Operational Transform (OT) is a technique that is related to CRDTs, and it is often used to solve the same kinds of problems. Like CRDTs, OT is a way of allowing multiple copies of a data structure to be updated independently and then merged together, but it uses a different approach to achieve this. OT works by applying a series of &amp;quot;operations&amp;quot; to the data, rather than directly modifying the data itself. This allows OT to detect and resolve conflicts between different copies of the data more easily, but it can also make it more complex to implement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you give me an example of a CRDT design?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Sure! One example of a CRDT is a &amp;quot;g-counter,&amp;quot; which is a data structure that stores a count. This data structure allows for the count to be incremented independently on different computers, and then merged together in a way that ensures that the final count is always correct. Here is one way that a g-counter could be implemented:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class GCounter {
  Map&amp;lt;String, Integer&amp;gt; counts;

  void increment(String nodeId) {
    counts.put(nodeId, counts.getOrDefault(nodeId, 0) + 1);
  }

  void merge(GCounter other) {
    for (Map.Entry&amp;lt;String, Integer&amp;gt; entry : other.counts.entrySet()) {
      String nodeId = entry.getKey();
      int count = entry.getValue();
      counts.put(nodeId, Math.max(counts.getOrDefault(nodeId, 0), count));
    }
  }

  int getCount() {
    return counts.values().stream().mapToInt(x -&amp;gt; x).sum();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;I never specified a programming language, so assume this is a kind of pseudocode&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this implementation, the increment() method is used to increment the count on a particular node, and the merge() method is used to merge the counts from two different g-counters together. The getCount() method returns the current value of the count.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And contrast with the design of an OT?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Here is an example of how an Operational Transform (OT) might be implemented for a simple text editing application:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class TextBuffer {
  StringBuilder text;

  void applyOperation(Operation op) {
    int start = op.getStartIndex();
    int end = op.getEndIndex();
    String newText = op.getText();
    text.replace(start, end, newText);
  }

  String getText() {
    return text.toString();
  }
}

class Operation {
  int startIndex;
  int endIndex;
  String text;

  int getStartIndex() {
    return startIndex;
  }

  int getEndIndex() {
    return endIndex;
  }

  String getText() {
    return text;
  }

  Operation transform(Operation other) {
    // Compute the transformed version of this operation, given the other operation
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;I never specified a programming language, so assume this is a kind of pseudocode&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this example, the TextBuffer class represents the text being edited, and the Operation class represents a single edit operation (e.g. inserting or deleting some text). The applyOperation() method is used to apply an operation to the text buffer, and the getText() method is used to retrieve the current contents of the buffer. The transform() method is used to compute the transformed version of an operation, given another operation. This is used to ensure that concurrent operations on the same text buffer can be merged together consistently.&lt;/p&gt;
&lt;p&gt;One key difference between this approach and the g-counter example is that OT explicitly tracks the operations that are applied to the data, rather than directly modifying the data itself. This makes it easier to detect and resolve conflicts between concurrent operations, but it also makes the implementation more complex.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you list known CRDTs and their usage in a table?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Here is a list of some common Conflict-free Replicated Data Types (CRDTs), along with a brief description of each one and some potential use cases:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CRDT&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Use Cases&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;G-Counter&lt;/td&gt;
&lt;td&gt;Stores a count that can be incremented independently on different nodes, and then merged together consistently.&lt;/td&gt;
&lt;td&gt;- Versioning systems that need to keep track of the number of times a file has been modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PN-Counter&lt;/td&gt;
&lt;td&gt;Stores a count that can be incremented or decremented independently on different nodes, and then merged together consistently.&lt;/td&gt;
&lt;td&gt;- Tracking the number of likes or dislikes on a social media post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Two-Phase Set&lt;/td&gt;
&lt;td&gt;Stores a set of unique values that can be added or removed independently on different nodes, and then merged together consistently.&lt;/td&gt;
&lt;td&gt;- Collaborative editing of a list of items (e.g. a to-do list).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OR-Set&lt;/td&gt;
&lt;td&gt;Stores a set of values that can be added independently on different nodes, and then merged together consistently.&lt;/td&gt;
&lt;td&gt;- Storing the list of friends that a user has on a social network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LWW-Element-Set&lt;/td&gt;
&lt;td&gt;Stores a set of values, where each value has a timestamp associated with it. The value with the most recent timestamp wins in case of conflicts.&lt;/td&gt;
&lt;td&gt;- Storing the latest version of a user's profile on a social network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Observed-Remove Set&lt;/td&gt;
&lt;td&gt;Stores a set of values that can be added or removed independently on different nodes, and then merged together consistently.&lt;/td&gt;
&lt;td&gt;- Storing the list of items that a user has added to their shopping cart on an e-commerce website.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These are just a few examples of CRDTs, and there are many other types of CRDTs that have been developed for different types of data and applications. In general, CRDTs can be useful whenever you need to store and update data in a distributed system, and you want to ensure that the data remains consistent even in the face of network partitions and other forms of partial failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you make a similar table for OTs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
Sure! Here is a table that lists some common Operational Transform (OT) techniques, along with a brief description of each one and some potential use cases:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OT Technique&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Use Cases&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Insert-Delete OT&lt;/td&gt;
&lt;td&gt;Allows for the insertion and deletion of text, and can detect and resolve conflicts between concurrent insertions and deletions.&lt;/td&gt;
&lt;td&gt;- Collaborative text editing in a real-time editor (e.g. Google Docs).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Block-Based OT&lt;/td&gt;
&lt;td&gt;Allows for the insertion, deletion, and movement of blocks of text, and can detect and resolve conflicts between concurrent insertions, deletions, and movements.&lt;/td&gt;
&lt;td&gt;- Collaborative editing of structured documents (e.g. a spreadsheet or a presentation).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change-Based OT&lt;/td&gt;
&lt;td&gt;Allows for arbitrary changes to be made to a document, and can detect and resolve conflicts between concurrent changes.&lt;/td&gt;
&lt;td&gt;- Collaborative editing of free-form documents (e.g. a word processor or a code editor).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;State-Based OT&lt;/td&gt;
&lt;td&gt;Stores the complete state of the document at each point in time, and can detect and resolve conflicts between concurrent changes by comparing the state of the document before and after each change.&lt;/td&gt;
&lt;td&gt;- Collaborative editing of complex data structures (e.g. a database or a network topology diagram).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hybrid OT&lt;/td&gt;
&lt;td&gt;Combines multiple OT techniques in order to support a wider range of operations and conflicts.&lt;/td&gt;
&lt;td&gt;- Collaborative editing of documents that contain both structured and unstructured data (e.g. a document that contains both text and images).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Composable OT&lt;/td&gt;
&lt;td&gt;Allows for OTs to be composed together in order to create more complex data structures and operations.&lt;/td&gt;
&lt;td&gt;- Building collaborative editing systems that support multiple types of data and operations (e.g. a system that supports text, images, and geometry).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Like CRDTs, there are many different OT techniques that have been developed for different types of data and applications, and this table only covers a few of the most common ones. In general, OTs can be useful whenever you need to support real-time collaboration on data, and you want to ensure that concurrent changes can be merged together consistently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;is there a use case to use both CRDTs and OTs together?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
It is possible to use Conflict-free Replicated Data Types (CRDTs) and Operational Transform (OT) techniques together in some cases, although this is not always necessary or desirable. Here are a few examples of situations where using both CRDTs and OTs together might be useful:&lt;/p&gt;
&lt;p&gt;If you have a data structure that is very complex and cannot be easily represented using a single CRDT, you could use a combination of CRDTs and OTs to break the data structure down into smaller, simpler pieces that can be managed independently. For example, you could use a CRDT to store the overall structure of the data, and then use OTs to handle the details of how the individual pieces of the data are updated and changed.&lt;/p&gt;
&lt;p&gt;If you have a data structure that is updated very frequently, and you need to ensure that updates can be applied and merged together quickly, you might use a CRDT to handle the &amp;quot;big picture&amp;quot; view of the data, and then use OTs to handle the finer-grained details of how the data is changed. This can help to reduce the amount of work that needs to be done in order to merge updates together, which can improve the overall performance of the system.&lt;/p&gt;
&lt;p&gt;If you have a data structure that needs to support both offline and online updates, you might use a CRDT to handle the offline updates, and then use OTs to handle the online updates. This can allow the system to continue functioning even when the network is unavailable, and then automatically merge any offline updates with the online updates when the network becomes available again.&lt;/p&gt;
&lt;p&gt;Overall, whether or not it makes sense to use CRDTs and OTs together in a particular system will depend on the specific requirements and constraints of the system, as well as the trade-offs between the different approaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are there any other similar types of data structures that also cover this space?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
There are many different types of data structures and algorithms that can be used to solve similar problems to those addressed by Conflict-free Replicated Data Types (CRDTs) and Operational Transform (OT) techniques. Some examples of other approaches that are related to CRDTs and OTs include:&lt;/p&gt;
&lt;p&gt;Replication protocols: These are algorithms that are used to manage the process of replicating data between different nodes in a distributed system. Replication protocols can be used to ensure that multiple copies of the data are kept consistent with each other, and that conflicts between different copies of the data are resolved in a way that preserves the integrity of the data.&lt;/p&gt;
&lt;p&gt;Consensus algorithms: These are algorithms that are used to reach agreement on the state of a distributed system, even in the presence of faulty or malicious nodes. Consensus algorithms can be used to ensure that different nodes in the system have a consistent view of the data, and that updates to the data are applied in a way that is consistent with the consensus.&lt;/p&gt;
&lt;p&gt;Distributed hash tables (DHTs): These are data structures that are used to store and retrieve data in a distributed system. DHTs use a hash function to map data to different nodes in the system, and they can be used to ensure that data is stored and retrieved in a consistent and efficient manner.&lt;/p&gt;
&lt;p&gt;Distributed databases: These are databases that are designed to be used in a distributed system, and that provide mechanisms for storing, querying, and updating data in a way that is consistent and scalable. Distributed databases can use a variety of techniques, including CRDTs and OTs, to ensure that the data remains consistent and available even in the face of network partitions and other forms of partial failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give me a example of a consensus algorithm that computes the final state of a text document that is edited in realtime in multiple distributed computers. I'm looking at a peer to peer network without central authority.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/gpt/gpt-logo.png" class="img-fluid" width="5%" alt="gpt-logo" /&gt;
One example of a consensus algorithm that could be used to compute the final state of a text document that is edited in realtime in multiple distributed computers is called the &amp;quot;Paxos&amp;quot; algorithm. This algorithm is a well-known method for reaching consensus in a distributed system, and it has been used in many different types of applications, including real-time collaborative text editing.&lt;/p&gt;
&lt;p&gt;Here is a high-level overview of how the Paxos algorithm might be used to compute the final state of a text document that is being edited in realtime by multiple users:&lt;/p&gt;
&lt;p&gt;Each user maintains a local copy of the text document, and as they make changes to the document, they also generate a sequence of &amp;quot;operations&amp;quot; that represent the changes they are making. These operations are sent to the other users in the network.&lt;/p&gt;
&lt;p&gt;When a user receives an operation from another user, they apply the operation to their local copy of the document. This may result in conflicts with other operations that have already been applied to the document, in which case the user will need to resolve the conflicts in some way (e.g. by using Operational Transform (OT) techniques).&lt;/p&gt;
&lt;p&gt;As the users continue to edit the document and generate new operations, they also participate in the Paxos consensus protocol. This involves sending messages to each other in order to agree on the sequence of operations that should be applied to the document. The messages are sent in a specific order, and they are used to ensure that all of the users eventually agree on the same sequence of operations.&lt;/p&gt;
&lt;p&gt;Once all of the users have agreed on the sequence of operations, they can apply those operations to their local copies of the document in order to compute the final state of the document. This final state will be the same for all of the users, and it will reflect all of the changes that have been made to the document by any of the users.&lt;/p&gt;
&lt;p&gt;The Paxos algorithm is a complex and subtle algorithm, and this is just a very high-level overview of how it might be used in this context. There are many different variations of the Paxos algorithm, and the specific details of how it is implemented will depend on the specific requirements and constraints of the system.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I have been enjoying using &lt;a href="https://chat.openai.com/chat"&gt;chatGPT&lt;/a&gt; as a private tutor / reference on topics. My biggest issue is now keeping up with the knowledge and asking the right questions.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/7Reasons-no-cache</id>
		<title>7 reasons to not use caching</title>
		<link href="http://ewinnington.github.io/posts/7Reasons-no-cache" />
		<updated>2022-12-04T16:30:00Z</updated>
		<content>&lt;p&gt;Inspired by &lt;a href="https://twitter.com/mjovanovictech"&gt;Milan Jovanović&lt;/a&gt; tweet on &lt;a href="https://twitter.com/mjovanovictech/status/1599124855542411264"&gt;5 reasons to use Redis for caching&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/caching/5reasonsCaching.png" class="img-fluid" width="80%" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;and &lt;a href="https://twitter.com/danielmarbach"&gt;Daniel Marbach's&lt;/a&gt; response &amp;quot;&lt;a href="https://twitter.com/danielmarbach/status/1599352526888849408"&gt;Now I want to see five reasons to avoid caching ✋😂&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/caching/5reasonsNoCaching.png" class="img-fluid" width="80%" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;I found &lt;a href="https://twitter.com/ThrowATwit/status/1599356806874427392"&gt;seven reasons to not introduce caching&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Caching can increase complexity in your application, as you need to manage the cached data and ensure it remains consistent with the underlying data store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can increase latency, as the cache itself introduces an additional lookup step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can be expensive, both in terms of the additional hardware and storage required for the cache, and the overhead of managing the cache itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can be unreliable, as cached data can become stale or inconsistent if it is not adequately managed or invalidated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can be a security risk, as sensitive data that is stored in the cache may be vulnerable to unauthorized access or exposure. It takes additional effort to ensure that the correct authorizations are applied to cached data, increasing application complexity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can be harder to debug. To determine why a piece of data is not being retrieved from the cache or is being retrieved from the underlying data store instead is difficult. This can make it challenging to diagnose and fix performance issues related to caching.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching can create additional maintenance overhead, as you need to monitor the cache and ensure it is working properly. Monitoring cache hit and miss rates, ensuring that the cache is not getting too full, and periodically purging expired or stale data from the cache.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and a bonus &lt;a href="https://mobile.twitter.com/joslat/status/1599518029649678336"&gt;8.&lt;/a&gt; from &lt;a href="https://mobile.twitter.com/joslat"&gt;Jose Luis Latorre&lt;/a&gt;
&amp;quot;8. It should be also properly tested, and stress tested... without mention the security testing as well should include a check on this layer too... which would bring us to point 3. More expensive ;)&amp;quot;&lt;/p&gt;
&lt;p&gt;Introducing Caching into any architecture is a decision that must be made with care. We have to ask if it helps us fulfill a business requirement (latency requirements), and improves quality or responsiveness for the end user. And we must ensure the solution is appropriate in terms of cost of operation and cost of monitoring and support. Additionally, the security aspects of a cache should be considered in the solution design.&lt;/p&gt;
&lt;p&gt;In software architecture, there are very few single answers, everything is a compromise. Caching is a great hammer and use it when it is appropriate, but remember not every problem is a nail.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Inspired by &lt;a href="https://twitter.com/mjovanovictech"&gt;Milan Jovanović&lt;/a&gt; tweet on &lt;a href="https://twitter.com/mjovanovictech/status/1599124855542411264"&gt;5 reasons to use Redis for caching&lt;/a&gt;,&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/Software-Architecture-Illustration</id>
		<title>Software Architecture illustrations</title>
		<link href="http://ewinnington.github.io/posts/Software-Architecture-Illustration" />
		<updated>2022-11-16T20:10:00Z</updated>
		<content>&lt;h1 id="illustrations-in-software-architecture"&gt;Illustrations in Software architecture&lt;/h1&gt;
&lt;p&gt;In software architecture, I find myself reaching more and more for tools that I can use to generate representations from a simple textual description, be it generated from a tool or hand written. And sometimes, nothing generated looks nice, so I have to do draw it myself!&lt;/p&gt;
&lt;p&gt;Here are a few of the tools I have recently used, for different purposes:&lt;/p&gt;
&lt;h2 id="diagrams-as-code"&gt;Diagrams as code:&lt;/h2&gt;
&lt;h3 id="mermaid"&gt;Mermaid&lt;/h3&gt;
&lt;p&gt;Mermaid is a language to generate flow charts, pie charts, entity relation diagrams and several other diagrams. I’ve used it in internal documentation and blog posts. The graph description language is simple enough that you can write code to generate charts, too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;https://mermaid-js.github.io/mermaid/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A live editor is also available online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mermaid.live/"&gt;https://mermaid.live/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mermaid rendering has been integrated into several markdown renderers, GitHub markdown and VS Code both support it.&lt;/p&gt;
&lt;div class="mermaid"&gt;flowchart LR
    a[Airflow] ---&gt; b[AirFlowTask] --&gt; c[[RabbitMQ Queue Events]] --&gt; d[EventReceiver] --insert--&gt; e[(Postgresql)] --&gt; Monitoring
    d --failed--&gt; g[[Deadletter queue]] --&gt; h[Reconciliation] --&gt; e
&lt;/div&gt;
&lt;p&gt;&lt;img src="/posts/images/SA-Illustrations/Mermaid-flow.png" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;div class="mermaid"&gt;sequenceDiagram
    autonumber

    participant C as Client
    participant S as Target

    S --) C: Communicate API-Key
    C -&gt;&gt; S: Send request with API-Key
    activate S
    S --&gt;&gt; S: Validate API-Key
    S -X C: If not valid: Return 401 
    S -&gt;&gt; C: If valid: Return 200
    deactivate S
&lt;/div&gt;
&lt;p&gt;&lt;img src="/posts/images/SA-Illustrations/Mermaid-sequence.png" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;h3 id="python-diagrams"&gt;Python Diagrams&lt;/h3&gt;
&lt;p&gt;Python has a diagram library which has icons for most programming tools, from Airflow to ZeroMQ. You design the diagram with simple Python code and it uses the Graphviz library to render png images. Highly recommended for small architecture diagrams that just need a dozen or so elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://diagrams.mingrammer.com/"&gt;https://diagrams.mingrammer.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve also done some pull requests to add symbols to the library and I recommend you do so too if you have elements that are missing in your diagrams.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;## pip install diagrams
## winget install -e --id Graphviz.Graphviz
## set PATH=C:\Program Files\Graphviz\bin;%PATH%
#
# Architecture of the docker-compose using a chart generated in py

from diagrams import Diagram, Cluster
from diagrams.onprem.inmemory import Redis
from diagrams.onprem.database import Postgresql
from diagrams.onprem.queue import Rabbitmq
from diagrams.programming.language import PHP
from diagrams.programming.language import Csharp
from diagrams.onprem.client import Users
from diagrams.onprem.network import Nginx

with Diagram(&amp;quot;Composed Docker&amp;quot;, show=False):
    users = Users(&amp;quot;users&amp;quot;)
    
    with Cluster(&amp;quot;Front-End&amp;quot;):
        web = Nginx(&amp;quot;ngweb&amp;quot;)
        php = PHP(&amp;quot;php&amp;quot;)

    with Cluster(&amp;quot;Back-Ends&amp;quot;):
        redis = Redis(&amp;quot;cache&amp;quot;)
        rabbit = Rabbitmq(&amp;quot;rabbit&amp;quot;)
        listener = Csharp(&amp;quot;listener&amp;quot;)
        db = Postgresql(&amp;quot;db&amp;quot;)
    
    users &amp;gt;&amp;gt; web &amp;gt;&amp;gt; php &amp;gt;&amp;gt; rabbit &amp;gt;&amp;gt; listener &amp;gt;&amp;gt; db
    php &amp;gt;&amp;gt; redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/SA-Illustrations/composed_docker.png" class="img-fluid" width="80%" alt="" /&gt;&lt;/p&gt;
&lt;h3 id="plantuml"&gt;PlantUML&lt;/h3&gt;
&lt;p&gt;The big one! Plant UML has a ton of diagrams, the language is maybe a bit more obscure and complicated than mermaid, but you gain a lot from PlantUML when you actually need those features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plantuml.com/"&gt;https://plantuml.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PlantUML also has a live editor online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.plantuml.com/plantuml/uml/"&gt;https://www.plantuml.com/plantuml/uml/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, I’ve used it quite seldomly, being able to cover most requirements with Mermaid and Python Diagrams.&lt;/p&gt;
&lt;h3 id="d2"&gt;D2&lt;/h3&gt;
&lt;p&gt;D2 has recently been open-sourced and made available. I haven't yet had time to test it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://d2lang.com/tour/intro/"&gt;https://d2lang.com/tour/intro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="diagrams-as-drawing"&gt;Diagrams as Drawing:&lt;/h2&gt;
&lt;h3 id="diagrams"&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Diagrams.net has both an online and an offline version of a vector drawing software that works exceedingly well for software architecture illustrations. With symbols for most public cloud platforms included in their delectable libraries, you’ll be able to find the right symbol you need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.diagrams.net/"&gt;https://www.diagrams.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s even a Visual Studio Code extension for editing a diagram inside the IDE. Export can be done to PNG easily. Diagrams produced are easily embedded in Atlassian’s wiki and other wiki products.&lt;/p&gt;
&lt;p&gt;Highly recommend if you need to place your architecture elements instead of relying on the auto layout of diagrams as code. Now I just wish that the diagrams as code tools could create a diagram baseline compatible with this tool to modify the layout.&lt;/p&gt;
&lt;h3 id="archi-archimate-modelling"&gt;Archi (Archimate modelling)&lt;/h3&gt;
&lt;p&gt;If you use the &lt;a href="https://en.m.wikipedia.org/wiki/ArchiMate"&gt;Archimate modelling language&lt;/a&gt;, then this is the tool for you to build your modelling concepts. The formalism is great for making something that everyone can “read” once trained on it, but the investment can be quite high to do the correct modelling of your infrastructure with this tool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.archimatetool.com/"&gt;https://www.archimatetool.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used the Local application running on Windows.&lt;/p&gt;
&lt;h4 id="online-architecture-repositories"&gt;Online architecture repositories&lt;/h4&gt;
&lt;p&gt;There is also online hosted versions of architecture repository tools using Archimate &lt;a href="https://www.boc-group.com/en/adoit/"&gt;Adoit EA Suite&lt;/a&gt; and an associated community version too.&lt;/p&gt;
&lt;p&gt;Alternatively, there's also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mega.com/hopex-platform"&gt;Hopex's MEGA&lt;/a&gt; which I only used as it was being decommissioned&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sparxsystems.com/products/ea/index.html"&gt;Sparx Systems’ Enterprise Architect&lt;/a&gt; which I used for a short amount of time before the company standardised on Adoit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="yed"&gt;yEd&lt;/h3&gt;
&lt;p&gt;In writing this article, I discovered the tool yEd and wanted to mention it for completeness, I haven't had the opportunity to use it yet. It does mention many of the illustration types that are useful (BPML, Flowcharts, UML, ...).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.yworks.com/products/yed"&gt;https://www.yworks.com/products/yed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="diagrams-from-programming"&gt;Diagrams from programming:&lt;/h2&gt;
&lt;p&gt;Now these are more out there and not always directly applicable, but when you need a visualisation that the above tools cannot do, it’s time to break out these applications.&lt;/p&gt;
&lt;h3 id="d3js"&gt;D3js&lt;/h3&gt;
&lt;p&gt;Not sure if I need to introduce D3js,  it is probably one of the most commonly use and important is visualisation libraries. Used in everything from maps to genomics to economic data. It can do it all.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://d3js.org/"&gt;https://d3js.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I previously used d3js to embed charts of price curves generated from market data, overlapped with the delivery period of energy instruments.&lt;/p&gt;
&lt;h3 id="processing.js"&gt;Processing.js&lt;/h3&gt;
&lt;p&gt;Animated heart pulsating on a field of scintillating gold lace? Yes. That and many more things! Processing excels in the visual demos, animations and more. You’ll have to code it, but it’s no issue to get your custom Mandelbrot animated render and many more. Has interactions with sound and many more features. Does have a high bar of entry though and it takes a while to be productive with it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://processing.org/"&gt;https://processing.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="graphviz"&gt;Graphviz&lt;/h3&gt;
&lt;p&gt;I would be remiss if I didn’t mention Graphviz. It is the library used to generate diagrams from textual descriptions using one of their many languages, Dot being one of them.&lt;/p&gt;
&lt;p&gt;Not something I use directly but more indirect usages via the Python diagrams library. You can learn it’s language and create charts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://graphviz.org/"&gt;https://graphviz.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="online-services-collaborative"&gt;Online services (collaborative)&lt;/h2&gt;
&lt;p&gt;When you need online collaboration, which the tools above do not cover, you can turn to the following services.&lt;/p&gt;
&lt;h3 id="miro"&gt;Miro&lt;/h3&gt;
&lt;p&gt;I’ve had the most experience with Miro while running large organisation meetings as a place to collect ideas, do feedback rounds and generally plan activities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://miro.com"&gt;https://miro.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lucidspark-lucidchart-and-lucidscale"&gt;LucidSpark, LucidChart and LucidScale&lt;/h3&gt;
&lt;p&gt;Both collaboration and vector illustration online software. Also their ability with lucid scale to connect and document your cloud infrastructure is very impressive and helps to keep you infrastructure maps updated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lucidspark.com/"&gt;https://www.lucidspark.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lucidscale.com/"&gt;https://www.lucidscale.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lucidchart.com/"&gt;https://www.lucidchart.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sadly, it’s one that I’ve not had the opportunity to use very often, usually because it was covered by other tools and no one else in the company was using it. But you should check it out to see if it does work for you and your team.&lt;/p&gt;
&lt;h3 id="microsoft-whiteboard"&gt;Microsoft Whiteboard&lt;/h3&gt;
&lt;p&gt;When all else fails, there’s Microsoft whiteboard. It works, there’s an online version, an integration in teams, a desktop app and even an iOS / iPadOS application. More suited to drawing with a pen, then it becomes a great collaborative whiteboard. I have given internal talks using a Microsoft Whiteboard as a backdrop. I really like to start small and progressively zoom out on these massive canvases.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/microsoft-365/microsoft-whiteboard/digital-whiteboard-app"&gt;https://www.microsoft.com/en-us/microsoft-365/microsoft-whiteboard/digital-whiteboard-app&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mind-maps"&gt;Mind maps&lt;/h2&gt;
&lt;p&gt;I don't use mind maps very often anymore. I was taught to use them as a child, but haven't kept up the practice. I'm just adding a couple of references in case you are looking for them:&lt;/p&gt;
&lt;h3 id="vscode-mindmap"&gt;vscode-mindmap&lt;/h3&gt;
&lt;p&gt;I've used vscode-mindmap when I needed to create a quick hierarchy map.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=pmcxs.vscode-mindmap"&gt;https://marketplace.visualstudio.com/items?itemName=pmcxs.vscode-mindmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There’s no one tool for everything in this day and age. Use what works for you and try out several to see if they stick!&lt;/p&gt;
&lt;p&gt;I highly recommend generating some charts in mermaid from your own database ER-Diagram (easy to do!) or using it to make pie charts like &lt;a href="https://youtu.be/IXRGa5m-Lbo"&gt;Microsoft Polyglot notebooks demonstrates at 15:05 onwards&lt;/a&gt; in their &lt;a href="https://github.com/dotnet/interactive/blob/main/samples/notebooks/polyglot/github%20repo%20milestone%20report.ipynb"&gt;GitHub demo notebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have other recommendations for me, do feel free to reach out and I’ll see if they make to cut to get added to this list. :) You can even pull request this actual blog post on GitHub.&lt;/p&gt;
&lt;p&gt;Finally, if someone has a recommendation for a WAN/LAN topology visualisation or charting tool, I’d be happy to hear about it and your experience with it!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;In software architecture, I find myself reaching more and more for tools that I can use to generate representations from a simple textual description, be it generated from a tool or hand written. And sometimes, nothing generated looks nice, so I have to do draw it myself!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/Data-Lineage</id>
		<title>Data Lineage for dataflow and workflow processes</title>
		<link href="http://ewinnington.github.io/posts/Data-Lineage" />
		<updated>2022-11-12T22:10:00Z</updated>
		<content>&lt;h1 id="data-lineage"&gt;Data lineage&lt;/h1&gt;
&lt;p&gt;When working with large amounts of data, extraction, transforms and loads procedures can hide the source of the original data and make inquiries on &amp;quot;where did this data come from and what happened to it?&amp;quot; difficult to answer.&lt;/p&gt;
&lt;p&gt;A data lineage is &amp;quot;the process of understanding, recording, and visualizing data as it flows from data sources to consumption&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&amp;quot; and tries to answer that question.&lt;/p&gt;
&lt;p&gt;Using dataflow and ETL orchestration tools such as &lt;a href="https://airflow.apache.org/"&gt;Airflow&lt;/a&gt;, &lt;a href="https://www.prefect.io"&gt;Prefect&lt;/a&gt;, &lt;a href="https://nifi.apache.org/"&gt;NiFi&lt;/a&gt;, we move and transform data, but also lose the reference as to how the data was transformed.&lt;/p&gt;
&lt;p&gt;In this document, we will approach one open source tool OpenLineage and one &amp;quot;hand built&amp;quot; approach to capturing and storing data lineage information.&lt;/p&gt;
&lt;h1 id="openlineage-and-marquez-open-source-tools"&gt;OpenLineage and Marquez - Open source tools&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://openlineage.io/"&gt;OpenLineage&lt;/a&gt; is an open source project and framework for data lineage collection and analysis that helps collect lineage metadata from the data  processing applications. At its core, OpenLineage exposes a standard API for metadata collection - a single API call: &lt;a href="https://openlineage.io/apidocs/openapi/"&gt;&lt;strong&gt;postRunEvent&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To simplify its implementation with AirFlow, Open Lineage has an &lt;a href="https://github.com/OpenLineage/OpenLineage/tree/main/integration/airflow/openlineage/airflow"&gt;airflow connection module&lt;/a&gt; already available.&lt;/p&gt;
&lt;p&gt;On the back-end, the storage of run meta-data has a reference implementation named Marquez. The data model is illustrated here.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lucid.app/lucidchart/f918ce01-9eb4-4900-b266-49935da271b8/view?page=8xAE.zxyknLQ#"&gt;Marquez data model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/data-lineage/Marquez-Data-Model.png" class="img-fluid" width="80%" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;But it is also possible to implement one's own storage for metadata in case there is a need or added value, but adopting the open source solution will be an advantage for integration later.&lt;/p&gt;
&lt;h1 id="locally-grown-alternatives"&gt;Locally grown alternatives&lt;/h1&gt;
&lt;p&gt;Data correlation and lineage information can be generated via the emission of events while processing input data. Additionally, input data can be fingerprinted via a fast hash function to check for duplicate imports, so as to enable idempotent processing.&lt;/p&gt;
&lt;h3 id="input-dataset-fingerprinting-via-non-cryptographic-hash-function"&gt;Input dataset fingerprinting via non-cryptographic hash function&lt;/h3&gt;
&lt;p&gt;We can use a fast non-cryptographic hash function such as &lt;a href="https://github.com/backtrace-labs/umash"&gt;umash&lt;/a&gt; to generate a hash of the input data or xxhash &lt;code&gt;sudo apt-get install xxhash&lt;/code&gt;. xxhash is capable of taking streaming STDIN data from compressed files to generate a fast hash.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;time gunzip -c /mnt/d/smart_meter_data/ckw_opendata_smartmeter_dataset_a_202101.csv.gz | /usr/bin/xxhsum
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="correlation-ids-with-uuids"&gt;Correlation IDs with UUIDs&lt;/h3&gt;
&lt;p&gt;Generating uuid for correlations identifiers along &lt;a href="https://www.rfc-editor.org/rfc/rfc4122.html"&gt;rfc4122&lt;/a&gt; gives us multiple variant generation algorithms to give us sortable UUIDs which minimize collision possibilities even with a high UUID generation rate.&lt;/p&gt;
&lt;h3 id="hierarchical-correlation-ids-using-closure-tables"&gt;Hierarchical correlation IDs using closure tables&lt;/h3&gt;
&lt;p&gt;When inputs contain a dataset that is composed of multiple data points that identify unique sets in our final processed dataset, it becomes necessary to be able to trace their lineage back to the initial input. A recursive search through a table of entries to find the parent correlation identifier of a child time-series is quite inefficient.&lt;/p&gt;
&lt;p&gt;To have fast search over deep hierarchies of correlations IDs in relational databases, we can turn to the concept of closure tables.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;Field&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;ParentId&lt;/td&gt;
&lt;td style="text-align: left;"&gt;UUID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;ChildId&lt;/td&gt;
&lt;td style="text-align: left;"&gt;UUID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Depth&lt;/td&gt;
&lt;td style="text-align: left;"&gt;integer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This table structure allows to query in one query all parent or children of an identifier in one non-recursive sql query. This is done at the cost of having to insert the entire hierarchy of the correlationIDs upon insertion.&lt;/p&gt;
&lt;p&gt;Here we are representing the two hierarchies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aaa &amp;gt; bbb &amp;gt; ccc
aaa &amp;gt; eee 
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;ParentId&lt;/th&gt;
&lt;th style="text-align: left;"&gt;ChildId&lt;/th&gt;
&lt;th style="text-align: right;"&gt;Depth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;bbb&lt;/td&gt;
&lt;td style="text-align: left;"&gt;bbb&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;ccc&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ccc&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;eee&lt;/td&gt;
&lt;td style="text-align: left;"&gt;eee&lt;/td&gt;
&lt;td style="text-align: right;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;bbb&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;bbb&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ccc&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;ccc&lt;/td&gt;
&lt;td style="text-align: right;"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;eee&lt;/td&gt;
&lt;td style="text-align: right;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: &lt;em&gt;if desired the initial 0 depth nodes can be neglected from the insertion process without losing functionality, but can be useful in certain modeling processes (eg. rights, groups)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If we need to find all children of &lt;strong&gt;aaa&lt;/strong&gt;, we can do a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT ChildId, Depth FROM Closure_Table WHERE ParentId = &amp;quot;aaa&amp;quot; ORDER BY Depth;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which returns the following&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;ChildId&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Depth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;bbb&lt;/td&gt;
&lt;td style="text-align: left;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;eee&lt;/td&gt;
&lt;td style="text-align: left;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;ccc&lt;/td&gt;
&lt;td style="text-align: left;"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If we need to find all parents of &lt;strong&gt;eee&lt;/strong&gt;, we can do a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT ParentId, Depth FROM Closure_Table WHERE ChildId = &amp;quot;eee&amp;quot; ORDER BY Depth DESC;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which returns the following&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;ParentId&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Depth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;aaa&lt;/td&gt;
&lt;td style="text-align: left;"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;eee&lt;/td&gt;
&lt;td style="text-align: left;"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="table-structure-for-a-correlated-fingerprinted-hierarchical-data-lineage"&gt;Table structure for a Correlated, fingerprinted hierarchical data lineage&lt;/h3&gt;
&lt;p&gt;With correlatedEvent and CorrelatedLineage tables, it becomes possible in a single request to generate a lineage graph for parents or descendants of correlated dataset.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/data-lineage/CorrelatedLineageDataModel.png" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;erDiagram
    CorrelationEvent {
        uuid     IdEvent
        string   Process
        string   Version
        hash     Fingerprint
        int      InputSize
        datetime EventTime
        int      Forced
    }

    CorrelationDetails {
        uuid IdEvent
        string Field
        json Data 
    }

    CorrelationLineage {
        uuid IdParent
        uuid IdChild
        integer Depth
    }

    CorrelationEvent ||--o{ CorrelationDetails : &amp;quot;&amp;quot;
    CorrelationEvent ||--o{ CorrelationLineage : &amp;quot;parent&amp;quot;
    CorrelationEvent ||--o{ CorrelationLineage : &amp;quot;child&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would even be possible to generate the diagrams using mermaid automatically to trace the flows through the system&lt;a id="fnref:2" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/data-lineage/CorrelatedLineageFlow.png" class="img-fluid" alt="" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flowchart LR
    id1((&amp;quot;DSO Timeseries&amp;quot;)) --&amp;gt; id2[SFTP Download] --&amp;gt; id3[Split]
    id3 --&amp;gt; TS01
    id3 --&amp;gt; TS02
    id3 --&amp;gt; TS03 
    id3 --&amp;gt; TS04
    id3 --&amp;gt; TS..
    TS01 --&amp;gt; id4[Delivery point sum]
    TS02 --&amp;gt; id4
    id4 --&amp;gt; id5[Load]

    met((Weather provider)) --&amp;gt; met2[API Download] --&amp;gt; met3[&amp;quot;Aggregate to hour&amp;quot;] --&amp;gt; met4[&amp;quot;delivery point history&amp;quot;]

    met4 --&amp;gt; for1[forecast consumption]
    id4 --&amp;gt; for1 --&amp;gt; for2[Load]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="solution-design"&gt;Solution design&lt;/h3&gt;
&lt;p&gt;A rabbitMQ message queue to receive correlation events emitted by the tasks, with several consumer tasks receiving and committing to the database is a preferred approach over an HTTP 1.1 connection due the the scaling efficiency of AMQP over pure HTTP&lt;a id="fnref:3" href="#fn:3" class="footnote-ref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/data-lineage/CorrelatedApplicationFlow.png" class="img-fluid" width="80%" alt="" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flowchart LR
    a[Airflow] ---&amp;gt; b[AirFlowTask] --&amp;gt; c[[RabbitMQ Queue Events]] --&amp;gt; d[EventReceiver] -- success --&amp;gt; g[(Postgresql)] --&amp;gt; Monitoring
    d -- failed --&amp;gt; e[[RabbitMQ Queue Deadletter]] --&amp;gt; f[DLQ processing and Reconciliation] --&amp;gt; g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A particular focus on the monitoring of the solution is necessary to truly have an operational system. The RabbitMQ should be a redundant, instrumented and reported to Graphana, with a queue length monitoring in place. The EventReceivers should employ a dead letter queue in case message are rejected by the database. These rejected messages could also also be a uuid collision - which can be treated by the daily reconciliation process and DeadLetter queue processing.&lt;/p&gt;
&lt;p&gt;A high availability Postgresql is recommended, either as a local instance or as a cloud hosted service - which would facilitate operations.&lt;/p&gt;
&lt;p&gt;The issue of Data retention should be discussed with Business. If we do not keep a time-series history in the time-series datastore, then the event correlation become actually an &lt;a href="https://microservices.io/patterns/data/event-sourcing.html"&gt;event sourcing pattern&lt;/a&gt;, enabling to re-create the history of how the time-series was updated.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Irrespective of the method chosen to capture and store the messages, the systems chosen must provide a high availability solution for data lineage - but must be sure to not block ingestion if the data lineage system is unresponsive. As long as the message queue is persistent and accessible, it can always be caught up later.&lt;/p&gt;
&lt;p&gt;The main task is emitting the events with meaningful data and unique correlation IDs. A focus on the semantics of the events while developing the workflow / dataflows is primordial. A callable event library provides the best developer experience to maximize standardization of code&lt;/p&gt;
&lt;p&gt;The design of idempotent imports into the system is important, it allows to replay events non-destructively and provides operational resilience.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.imperva.com/learn/data-security/data-lineage/"&gt;https://www.imperva.com/learn/data-security/data-lineage/&lt;/a&gt;&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/interactive/blob/main/samples/notebooks/polyglot/github%20repo%20milestone%20report.ipynb"&gt;https://github.com/dotnet/interactive/blob/main/samples/notebooks/polyglot/github%20repo%20milestone%20report.ipynb&lt;/a&gt; - See the PieWithMermaid C# task for a visualisation of such an interaction.&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This should be re-evaluated when HTTP/3 oneshot becomes available in the servers and languages used. The expected performance improvement are such that at that time HTTP/3 QUIC might outrace any other streaming solution. &lt;a href="https://blog.cloudflare.com/http3-the-past-present-and-future/"&gt;https://blog.cloudflare.com/http3-the-past-present-and-future/&lt;/a&gt;&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
		<summary>&lt;p&gt;When working with large amounts of data, extraction, transforms and loads procedures can hide the source of the original data and make inquiries on "where did this data come from and what happened to it?" difficult to answer.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/tesla-megapack</id>
		<title>Tesla Megapacks put into context</title>
		<link href="http://ewinnington.github.io/posts/tesla-megapack" />
		<updated>2022-11-09T21:40:00Z</updated>
		<content>&lt;h1 id="tesla-megapacks"&gt;Tesla Megapacks&lt;/h1&gt;
&lt;p&gt;Tesla on Twitter announced: &lt;a href="https://t.co/aw85eHECXI"&gt;&amp;quot;Meet Megafactory, our new Megapack factory in Lathrop, CA 🔋🔋🔋&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tesla's energy division has recently completed their new Megapack factory in Lathrop California , which they claim can produce currently 10'000 Megapacks a year. How much storage is that and how does this compare to a Hydropower pump storage plant?&lt;/p&gt;
&lt;h2 id="tesla-megapacks-specs-per-pack"&gt;Tesla megapacks Specs per pack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4 Hour Duration&lt;/li&gt;
&lt;li&gt;Power: 970 kW&lt;/li&gt;
&lt;li&gt;Energy: 3,916 kWh per Megapack&lt;/li&gt;
&lt;li&gt;Round Trip Efficiency: 93.5%&lt;/li&gt;
&lt;li&gt;9.12 m x 1.65 m x 2.79 m&lt;/li&gt;
&lt;li&gt;38,100 kg&lt;/li&gt;
&lt;li&gt;~$2 million per pack&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="offer"&gt;Offer&lt;/h2&gt;
&lt;p&gt;An offer was generated on the Tesla Energy website to get an appropriate pricing for the largest system they offer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1000 Megapack&lt;/li&gt;
&lt;li&gt;969.6 MW Power&lt;/li&gt;
&lt;li&gt;3916 MWh Energy Megapack&lt;/li&gt;
&lt;li&gt;Duration: 4 Hours&lt;/li&gt;
&lt;li&gt;Delivery: Q3 2024&lt;/li&gt;
&lt;li&gt;Estimated Price (California) $1,832,519,850&lt;/li&gt;
&lt;li&gt;Est. Annual Maintenance $4,821,480 - Maintenance Price escalates at 2% per year&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on this, we can see that 10'000 megapacks represent about 39160 MWh of storage (39 GWh), with a sales cost of approx $18 billion.&lt;/p&gt;
&lt;p&gt;So how does this compare to the two latest large Swiss Pump-Storage Hydropowerplants?&lt;/p&gt;
&lt;h2 id="hydropower-plants"&gt;Hydropower plants&lt;/h2&gt;
&lt;h3 id="nant-de-drance-pump-storage-extension"&gt;Nant-de-Drance pump-storage extension&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1 Pump-storage power plant&lt;/li&gt;
&lt;li&gt;Power 900 MW (Turbines and Pumps)&lt;/li&gt;
&lt;li&gt;Storage 20 GWh&lt;/li&gt;
&lt;li&gt;Duration: 19 Hours&lt;/li&gt;
&lt;li&gt;Round trip efficiency: over 90%&lt;/li&gt;
&lt;li&gt;Estimated Price 2 billion CHF&lt;/li&gt;
&lt;li&gt;~14 years to build and bring into operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="kraftwerk-linthlimmern-pump-storage-extension"&gt;Kraftwerk-Linth–Limmern pump-storage extension&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1 Pump-storage power plant&lt;/li&gt;
&lt;li&gt;Power 1000 MW (Turbines and Pumps)&lt;/li&gt;
&lt;li&gt;Storage 33 GWh&lt;/li&gt;
&lt;li&gt;Duration: 33 Hours&lt;/li&gt;
&lt;li&gt;Round trip efficiency: over 90%&lt;/li&gt;
&lt;li&gt;Estimated Price 2.1 billion CHF&lt;/li&gt;
&lt;li&gt;~10 years to build and bring into operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The storage cost of the batteries is currently about a factor 4-9x the price of the hydropower plant construction but have the advantage of being available within about 18 months. What remains to be seen is how much battery degradation is a factor in these grid scale battery installations. At least Tesla is offering, from my understanding, a 15 year warranty on the Megapack.&lt;/p&gt;
&lt;p&gt;The amount of storage produced by the factory represents more than 1 large hydropower plant per year.&lt;/p&gt;
&lt;p&gt;The 39 GWh storage produced by the factory in one year is a huge amount, so much that it would cover around 25% of the &lt;a href="https://www.iea.org/data-and-statistics/charts/battery-storage-capability-by-countries-2020-and-2026"&gt;expected total capacity that the IEA planned for the entire world by 2026&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="post-scriptum-new-gridscale-batteries-in-europe"&gt;Post-scriptum: new gridscale batteries in Europe&lt;/h2&gt;
&lt;p&gt;2022.11.22 - &lt;a href="https://www.bbc.com/news/uk-england-humber-63707463"&gt;Cottingham: Europe's biggest battery storage system switched on - 196MWh&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power: ? (my estimate ~50-100 MW)&lt;/li&gt;
&lt;li&gt;Storage: 196 MWh&lt;/li&gt;
&lt;li&gt;use Tesla's AI software to match energy supply to demand&lt;/li&gt;
&lt;li&gt;Commissioning in two stages in December 2022 and March 2023.&lt;/li&gt;
&lt;li&gt;Supplier: Tesla&lt;/li&gt;
&lt;li&gt;Cost: ? (my estimate $100 million+)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual, BBC is terribly uninformative about specifications and cost. If we assume 50 Tesla Megapacks, cost should be around $100 million+ and 50 to 100 MW based on the 2h or 4h megapacks. Interesting to see a Tesla system in Europe. I expect many more to come online.&lt;/p&gt;
&lt;p&gt;2022.11.07 - &lt;a href="https://www.rwe.com/en/press/rwe-generation/2022-11-07-battery-storage-220-mw-neurath"&gt;RWE gives green light for 220-megawatt battery storage system in North Rhine-Westphalia&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power: 80 + 140 MW = 220 MW&lt;/li&gt;
&lt;li&gt;Storage: delivering the required output for over an hour but full capacity not mentioned. 220 MWh to 440MWh.&lt;/li&gt;
&lt;li&gt;140 million euros&lt;/li&gt;
&lt;li&gt;commissioning in 2024&lt;/li&gt;
&lt;li&gt;Supplier: Not mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2021.07.22 - &lt;a href="https://www.rwe.com/en/press/rwe-ag/2021-07-22-rwe-builds-one-of-the-largest-battery-storage-facilities-in-germany"&gt;RWE bringing 72MW BESS in Germany online in November&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power: 72 + 45MW = 117 MW&lt;/li&gt;
&lt;li&gt;Storage: 128MWh&lt;/li&gt;
&lt;li&gt;€50 million&lt;/li&gt;
&lt;li&gt;commissioning in end 2022&lt;/li&gt;
&lt;li&gt;Supplier: CATL batteries&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;Tesla on Twitter announced: &lt;a href="https://t.co/aw85eHECXI"&gt;"Meet Megafactory, our new Megapack factory in Lathrop, CA 🔋🔋🔋"&lt;/a&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/sqlite-microstores</id>
		<title>Embracing SQLite and living with micro-services</title>
		<link href="http://ewinnington.github.io/posts/sqlite-microstores" />
		<updated>2022-10-22T00:00:00Z</updated>
		<content>&lt;p&gt;The idea of micro-services and their own single purpose data stores is easy to describe. But then to implement and live with it is a different story. So as a developer and architect, I’ve decided to do just that! Make micro-services and micro-data stores to cover the tiny and small stuff in my life I want to keep track of.&lt;/p&gt;
&lt;p&gt;As an example, I read online comics, light novels and mangas. I had a continuous list of a couple hundred bookmarks that I tried to keep updated with the last position I was when I read the story. But I always forget to update the bookmark and have so many of them that I lose the last read chapter. My solution?&lt;/p&gt;
&lt;p&gt;A SQLite db and some Python code to load it. Pass a single url on some command line Python and it gets added to the Db, a Request goes out, gets the title and chapter from the html, then adds it to the DB by title. Now I have a track of where I left off and I can get have last updated / last read records. Bonus, I can do a SELECT .. ORDER BY updated LIMIT 10 to check the last stories I was reading and pipe them to my browser to open up the chapters where I left them off.&lt;/p&gt;
&lt;p&gt;To really embrace SQLite is to make everything in your life become a new micro database, even if there's only a couple of tables with a dozen or a hundred rows.&lt;/p&gt;
&lt;p&gt;Stock tracking? an SQLite Db with Transactions and a roll-up Inventory table.&lt;/p&gt;
&lt;p&gt;In fact, even when sending data around from one system to another, we should even embrace the simplicity of SQLite over CSV files. See &lt;a href="https://berthub.eu/articles/posts/big-data-storage/"&gt;https://berthub.eu/articles/posts/big-data-storage/&lt;/a&gt; for his views and performance tests.&lt;/p&gt;
&lt;p&gt;Now I have micro data-stores, I can add a service on top which contains the CRUD commands I need to interact with them and show them in a personal dashboard.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;The idea of micro-services and their own single purpose data stores is easy to describe. But then to implement and live with it is a different story. So as a developer and architect, I’ve decided to do just that! Make micro-services and micro-data stores to cover the tiny and small stuff in my life I want to keep track of.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/Starship-laser-ablation</id>
		<title>The case for a SpaceX Starship laser ablation platform for orbital debris management</title>
		<link href="http://ewinnington.github.io/posts/Starship-laser-ablation" />
		<updated>2022-09-18T00:00:00Z</updated>
		<content>&lt;p&gt;SpaceX’s Starship program as a platform for specialised load-outs has many potential applications: Tanker variants for orbital refuelling, Crew variant for Dear Moon mission and dedicated satellite launcher for the Starlink satellite constellation deployment being the variants we already know about.&lt;/p&gt;
&lt;p&gt;With the latest discussion about Orbital debris fields, I suggest it is time to discuss about another variant: a dedicated laser ablation Starship variant for de-orbiting or destroying 1 to 10 cm sized debris.&lt;/p&gt;
&lt;p&gt;To deorbit or destroy debris in Earth’s orbit, laser ablation is one of the ideal techniques to use since it can directly burn up small debris or  deorbit larger ones via plasma propulsion (in effect, burning up the target object and causing it to be propelled by the plasma generated by the laser hitting the target).&lt;/p&gt;
&lt;p&gt;To be able to make orbital cleanup affordable, we need to have a cheap to fly, high power laser with a sufficient burn time and have the ability to choose the orbit of our laser platform.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cheap to fly: The launch costs of a SpaceX starship is estimated to be at least one order of magnitude less in dollar per kilo to orbit.&lt;/li&gt;
&lt;li&gt;High power laser: The high power of chemical lasers along with their high mass requirements make them a good fit for integration into a Starship. With sufficient mass for the chemicals to supply the laser, the lasers could be used long enough to clear the coplanar orbit. Once the chemicals are depleted, the starship can be landed and the laser refuelled for another mission. Other types of lasers, which have been developed recently, are also candidates: Solid state lasers, fiber lasers, diode lasers - with these the mass capability of Starship would be used for large batteries and potentially hydrogen fuel cells to provide enough power for the application.&lt;/li&gt;
&lt;li&gt;Ability to choose orbit: Laser ablation is most effective when the platform if shooting from a “same altitude and coplanar” orbit. Different launches are then the most effective way of reaching these orbits to get maximal efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the &lt;a href="https://www.fastcompany.com/90789865/orbits-act-what-to-know-about-congress-effort-to-clean-up-space-debris"&gt;US government decides to start paying for orbital clearing services&lt;/a&gt; with the Orbital Clearance with the Orbital Sustainability (ORBITS) Act, it would be a clear case to develop such a Starship variant. Without other incentives, it might still be profitable by selling “deorbiting and clearance services” to other satellite providers. This remains to be seen how much “good citizenship” is to be expected from satellite constructors, launchers and operators.&lt;/p&gt;
&lt;h2 id="references-to-laser-ablation-papers"&gt;References to laser ablation papers&lt;/h2&gt;
&lt;p&gt;Space based -
&lt;a href="https://conference.sdo.esoc.esa.int/proceedings/sdc8/paper/43/SDC8-paper43.pdf"&gt;https://conference.sdo.esoc.esa.int/proceedings/sdc8/paper/43/SDC8-paper43.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ground based -
&lt;a href="https://conference.sdo.esoc.esa.int/proceedings/sdc6/paper/29/SDC6-paper29.pdf"&gt;https://conference.sdo.esoc.esa.int/proceedings/sdc6/paper/29/SDC6-paper29.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Air based Anti ballistic missile chemical laser - a lower powered could be used in Starsjip for de-orbiting, but this shows the feasibility.
&lt;a href="https://minutemanmissile.com/abl.html"&gt;https://minutemanmissile.com/abl.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="discussion"&gt;Discussion&lt;/h2&gt;
&lt;p&gt;A &lt;a href="https://www.reddit.com/r/SpaceXLounge/comments/xj8bjh/the_case_for_a_spacex_starship_laser_ablation/"&gt;discussion thread on reddit about this post&lt;/a&gt; has provided some feedback and the post has been updated.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;SpaceX’s Starship program as a platform for specialised load-outs has many potential applications: Tanker variants for orbital refuelling, Crew variant for Dear Moon mission and dedicated satellite launcher for the Starlink satellite constellation deployment being the variants we already know about.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/Viruses-left-behind</id>
		<title>We can leave viruses behind on Earth as we leave the gravity well</title>
		<link href="http://ewinnington.github.io/posts/Viruses-left-behind" />
		<updated>2022-01-14T00:00:00Z</updated>
		<content>&lt;p&gt;As humanity left for the stars, bacteria hitched a ride with us. They were on us, in us and around us - as much part of us as our own cells. Viruses, on the other hand, due to careful screening programs, quarantines and selective breeding programs of the few animals that took to the stars, were confined to the gravity well of Earth. Without hosts, they could not follow us. We had left our ancient enemy behind.&lt;/p&gt;
&lt;p&gt;Within two generations, the space born growing up on the O’Neill colony cylinders - even those who lived at 0.9 to 1g - realised that earth was going to be a forbidden planet for them. They had no defences against the viruses that continued to permeate the planet. A visit to earth required them to live in an isolation suit and sterile quarters - limiting contact with the earthers and fauna.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;As humanity left for the stars, bacteria hitched a ride with us. They were on us, in us and around us - as much part of us as our own cells. Viruses, on the other hand, due to careful screening programs, quarantines and selective breeding programs of the few animals that took to the stars, were confined to the gravity well of Earth. Without hosts, they could not follow us. We had left our ancient enemy behind.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/db-health</id>
		<title>Checking for liveness on databases for health checks</title>
		<link href="http://ewinnington.github.io/posts/db-health" />
		<updated>2020-07-14T00:00:00Z</updated>
		<content>&lt;p&gt;When you just want to check a DB is reachable from your api or code, a health check is used. For the following DBs the simplest query is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oracle: &lt;code&gt;SELECT 1 FROM dual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Postgresql: &lt;code&gt;SELECT 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQLite: &lt;code&gt;SELECT 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mysql / MariaDb: &lt;code&gt;SELECT 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL-Server: &lt;code&gt;SELECT 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is really an odd one on the list.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;When you just want to check a DB is reachable from your api or code, a health check is used. For the following DBs the simplest query is:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/Point-of-exporing-space</id>
		<title>The point of Space exploration</title>
		<link href="http://ewinnington.github.io/posts/Point-of-exporing-space" />
		<updated>2020-04-18T00:00:00Z</updated>
		<content>&lt;p&gt;In my view, the point of exploration is hope. For a small slice of humanity, hope in a better world is what drives us.&lt;/p&gt;
&lt;p&gt;By learning about the composition of the moon, setting up ultra precise reflectors on its surface to map its motion and exploring it, we are learning about our solar system and the universe, as well as the challenges we will face in the centuries to come.&lt;/p&gt;
&lt;p&gt;Humanity needs to expand beyond earth to realize how precious earth is. Every person who has been to space has come back profoundly changed and humbled by the experience. A little distance is needed to appreciate the view and realize how lucky we all are.&lt;/p&gt;
&lt;p&gt;The science benefits us all: Solar panels and microwaves to medical innovations. Theory of ecology in closed systems, advanced recycling  and so many more.&lt;/p&gt;
&lt;p&gt;Mars and the moon are but a stepping stone to the solar system. And hopefully to the milky way and beyond. We need to answer the question &amp;quot;Is there life out there?&amp;quot;, or at least I do.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;In my view, the point of exploration is hope. For a small slice of humanity, hope in a better world is what drives us.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-tips-csharp</id>
		<title>Tips and tricks for C# Jupyter notebook</title>
		<link href="http://ewinnington.github.io/posts/jupyter-tips-csharp" />
		<updated>2019-11-17T01:30:00Z</updated>
		<content>&lt;p&gt;As I use the Jupyter notebook with C# integration, I'll add to this list of tricks as I discover them.&lt;/p&gt;
&lt;h2 id="adding-collapsed-details-to-jupyter-notebooks"&gt;Adding collapsed details to jupyter notebooks&lt;/h2&gt;
&lt;p&gt;I wanted to show hints and answers to questions in the jupyter notebook, but I didn't want them to be directly visible without interaction.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/collapsed_details.png" class="img-fluid" alt="collapsed" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/expanded_details.png" class="img-fluid" alt="expanded" /&gt;&lt;/p&gt;
&lt;p&gt;This was done by creating a markdown block with an HTML section inside. When interacted with, the section expands.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Summary of the fold&amp;lt;/summary&amp;gt;
  ... Content shown after the fold ...
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;summary&gt;Summary of the fold&lt;/summary&gt;
  ... Content shown after the fold ...
&lt;/details&gt;
&lt;p&gt;And since it's just HTML, it works anywere, including here.&lt;/p&gt;
&lt;h2 id="display-function"&gt;display() function&lt;/h2&gt;
&lt;p&gt;The C# kernel embedded in Jupyter has some functions that control the output to the cells of the notebook when executed. One of these functions is  &lt;code&gt;display()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="tables"&gt;Tables&lt;/h3&gt;
&lt;p&gt;It shows properties of objects or lists in a table format. In my linear programming solver examples, I used this command to make a table with the name and value of each problem variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt; display(solver.variables().Select(a =&amp;gt; new { Name  = a.Name(), Value = a.SolutionValue() })); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-6.png" class="img-fluid" alt="var_table" /&gt;&lt;/p&gt;
&lt;p&gt;This is an ideal case for &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types"&gt;C#'s anonymous objects&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/data-transformations-with-linq"&gt;linq to select the object properties&lt;/a&gt; that you want to see in the table. Adding &lt;code&gt;using System.Linq;&lt;/code&gt; to your references will allow you to use the &lt;code&gt;.Select( x =&amp;gt; new { PropertyHeader = x.PropertyValue, ... })&lt;/code&gt; linq command.&lt;/p&gt;
&lt;h3 id="svgs"&gt;SVGs&lt;/h3&gt;
&lt;p&gt;I discovered the &lt;code&gt;display(HTML())&lt;/code&gt; function allows you to pass items such as SVGs from inside C# to be rendered below the block. Two examples are the SVG image triange and the bar chart. On top of that, the bar chart is stylable by CSS.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/svg_img.png" class="img-fluid" alt="expanded" /&gt;&lt;/p&gt;
&lt;p&gt;The SVG code is generated inside C#, then the variable containing the SVG is displayed.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/bar_chart.png" class="img-fluid" alt="expanded" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, you can add create a cell containing some CSS (with &lt;code&gt;%%html&lt;/code&gt;) , which when executed will change the chart as shown.
&lt;img src="/posts/images/jupyter-notebook-tips/bar_chart_with_css.png" class="img-fluid" alt="expanded" /&gt;
&lt;img src="/posts/images/jupyter-notebook-tips/bar_chart_css.png" class="img-fluid" alt="expanded" /&gt;&lt;/p&gt;
&lt;h2 id="magic"&gt;Magic&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;%lsmagic&lt;/code&gt; command shows a list of commands available to use in code blocks.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/lsmagic.png" class="img-fluid" alt="expanded" /&gt;&lt;/p&gt;
&lt;h3 id="javascript"&gt;%%javascript&lt;/h3&gt;
&lt;p&gt;You can execute javascript with the &lt;code&gt;%%javascript&lt;/code&gt; magic.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/javascript_hello.png" class="img-fluid" alt="collapsed" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/javascript_hello_active.png" class="img-fluid" alt="collapsed" /&gt;&lt;/p&gt;
&lt;h3 id="html"&gt;%%html&lt;/h3&gt;
&lt;p&gt;As previously mentioned, the %%html command will allow you to add CSS blocks and any other HTML output directly into the Jupyter output cell.&lt;/p&gt;
&lt;h3 id="time"&gt;%%time&lt;/h3&gt;
&lt;p&gt;Gives you access to the wall time. Actual time took to execution of the cell.&lt;/p&gt;
&lt;h3 id="whos"&gt;%whos&lt;/h3&gt;
&lt;p&gt;Gives you access to the list of currently defined variable in the memory of the notebook. Also lists the type and value (as a &amp;quot;toString() representation) of the objects.&lt;/p&gt;
&lt;h3 id="fsharp"&gt;%%fsharp&lt;/h3&gt;
&lt;p&gt;You can intermingle C# and F# code inside one notebook, as long as they are in different cells. You can switch to F# by prefixing the cell with &lt;code&gt;%%fsharp&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-%%fsharp"&gt;let main argv =
    display &amp;quot;Hello World from F#!&amp;quot;
    0 
main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/f_sharp.png" class="img-fluid" alt="collapsed" /&gt;&lt;/p&gt;
&lt;h2 id="graphing-from-c"&gt;Graphing from C#&lt;/h2&gt;
&lt;p&gt;We can chart using &lt;code&gt;Xplot.Plotly&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;//Install XPlot package
#r &amp;quot;nuget:XPlot.Plotly,2.0.0&amp;quot;
using XPlot.Plotly;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Input data:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;DateTime now = DateTime.Now; 
var imax = 8760; 
var rand = new Random(); 
double[] data = Enumerable.Range(1, imax).Select(x =&amp;gt; 20.0 + 15.0 * Math.Sin(x/60.0) + 12 * rand.NextDouble()).ToArray(); 
DateTime[] tp = Enumerable.Range(1, imax).Select(x =&amp;gt; now.AddHours(x) ).ToArray(); 

int totalNumberForBarChart = 3;
double[] actualFares = new [] {3.4, 12.3, 20.42};
double[] predictionFares = new [] {7.4, 14.3, 18.42};
int[] elements = Enumerable.Range(0, totalNumberForBarChart).ToArray();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;my samples are here &lt;a href="https://github.com/ewinnington/noteb/blob/master/Charts_CSharp.ipynb"&gt;C# charts&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="two-bar-plot"&gt;Two bar plot&lt;/h3&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/bar.png" class="img-fluid" alt="bar" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;// Define group for Actual values
var ActualValuesGroupBarGraph = new Graph.Bar()
{
   x = elements,
   y = actualFares,
   name = &amp;quot;Actual&amp;quot;
};
 
// Define group for Prediction values
var PredictionValuesGroupBarGraph = new Graph.Bar()
{
   x = elements,
   y = predictionFares,
   name = &amp;quot;Predicted&amp;quot;
};
 
var chart = Chart.Plot(new[] {ActualValuesGroupBarGraph, PredictionValuesGroupBarGraph});
var layout = new Layout.Layout(){barmode = &amp;quot;group&amp;quot;, title=&amp;quot;Actual fares vs. Predicted fares Comparison&amp;quot;};
chart.WithLayout(layout);
chart.WithXTitle(&amp;quot;Cases&amp;quot;);
chart.WithYTitle(&amp;quot;Fare&amp;quot;);
chart.WithLegend(true);
chart.Width = 700;
chart.Height = 400;
 
display(chart);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="histogram"&gt;Histogram&lt;/h3&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/histogram.png" class="img-fluid" alt="hist" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;var faresHistogram = Chart.Plot(new Graph.Histogram(){x = data, autobinx = false, nbinsx = 20});
var layout = new Layout.Layout(){title=&amp;quot;Distribution of taxi trips per cost&amp;quot;};
faresHistogram.WithLayout(layout);

display(faresHistogram);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="scatter"&gt;Scatter&lt;/h3&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/scatter.png" class="img-fluid" alt="scatter" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;var chart = Chart.Plot(
    new Graph.Scatter()
    {
        x = actualFares,
        y = predictionFares,
        mode = &amp;quot;markers&amp;quot;,
        marker = new Graph.Marker()
        {
            color = predictionFares,
            colorscale = &amp;quot;Jet&amp;quot;
        }
    }
);

var layout = new Layout.Layout(){title=&amp;quot;Plot Time vs. Distance &amp;amp; color scale on Fares&amp;quot;};
chart.WithLayout(layout);
chart.Width = 500;
chart.Height = 500;
chart.WithLegend(true);

display(chart);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="line-chart-with-scatter"&gt;Line chart with scatter&lt;/h3&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-tips/lines.png" class="img-fluid" alt="lines" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;var linedUp = new Graph.Scatter()
{
    x = tp,
    y = data,
    mode = &amp;quot;lines&amp;quot;,
};

var chart = Chart.Plot(linedUp);
chart.WithXTitle(&amp;quot;Date&amp;quot;);
chart.WithYTitle(&amp;quot;Value&amp;quot;);
chart.WithLegend(true);
chart.Width = 1200;
chart.Height = 600;
display(chart);
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;As I use the Jupyter notebook with C# integration, I'll add to this list of tricks as I discover them.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-lp-20</id>
		<title>Applications in LP and MILP with C# and OR-Tools inside Jupyter</title>
		<link href="http://ewinnington.github.io/posts/jupyter-lp-20" />
		<updated>2019-11-16T23:30:00Z</updated>
		<content>&lt;p&gt;Thanks to the integration of C# into &lt;a href="https://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; with the &lt;a href="https://github.com/dotnet/try"&gt;kernel from Donet try&lt;/a&gt; and support from the &lt;a href="https://mybinder.org/"&gt;MyBinder.org&lt;/a&gt; hosting, it's easy to share with you runnable workbooks to illustrate how to use the &lt;a href="https://developers.google.com/optimization"&gt;Google OR-Tools&lt;/a&gt; to solve the &lt;a href="https://en.wikipedia.org/wiki/Linear_programming"&gt;linear&lt;/a&gt; (LP) and &lt;a href="https://en.wikipedia.org/wiki/Integer_programming"&gt;mixed-integer linear problems&lt;/a&gt; (MILP) .&lt;/p&gt;
&lt;h1 id="applications-of-linear-programming"&gt;Applications of linear programming&lt;/h1&gt;
&lt;h2 id="lp-problem-wire-production"&gt;LP Problem : Wire production&lt;/h2&gt;
&lt;p&gt;A plant makes aluminium and copper wires. Each Kg of aluminium wire requires 10 kWh of electricity and &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt; hour of labour. Each Kg of Copper wire requires 4 kWh of electricity and $1$ hour of labour. Electricity is limited to 450 kWh/day, labour is limited to 42.5 hours/day at a cost of 11 € an hour, Electricity cost is 20 € / MWh, Aluminium cost is 1.8 €/Kg, Copper cost is 5.4 €/Kg. Total weight delivered to the plant daily is limited to 56 Kg. Aluminium wire sales price is 45 €/Kg, Copper wire sales price is 50 €/Kg.&lt;/p&gt;
&lt;p&gt;What should be produced to maximise profit and what is the maximum profit?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=Lp_WireProduction.ipynb"&gt;Launch the binder&lt;/a&gt;  &lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=Lp_WireProduction.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;Solver solver = Solver.CreateSolver(&amp;quot;LinearProgramming&amp;quot;, &amp;quot;CLP_LINEAR_PROGRAMMING&amp;quot;);

//Setting up the variables and constants of the problem 
Variable Al = solver.MakeNumVar(0.0, double.PositiveInfinity, &amp;quot;Al&amp;quot;);
Variable Cu = solver.MakeNumVar(0.0, double.PositiveInfinity, &amp;quot;Cu&amp;quot;);
double El_Price = 20.0; double El_Max = 450; 
double La_Price = 11.0; double La_Max = 42.5; 
double Weight_Max = 56.0; 
double Al_Purchase = 1.8 ; double Al_Sale = 45.0;
double Cu_Purchase = 5.4; double Cu_Sale = 50.0;

// Maximize revenue 
Objective objective = solver.Objective();
objective.SetCoefficient(Al, Al_Sale-Al_Purchase-(La_Price * 1/2.0)-(El_Price * 10/1000.0));
objective.SetCoefficient(Cu, Cu_Sale-Cu_Purchase-(La_Price * 1)-(El_Price * 4/1000.0));
objective.SetMaximization();

// Electricity usage limit
Constraint c0 = solver.MakeConstraint(0, El_Max);
c0.SetCoefficient(Al, 10);
c0.SetCoefficient(Cu, 4);

// Labour usage limit
Constraint c1 = solver.MakeConstraint(0, La_Max);
c1.SetCoefficient(Al, 1/2.0);
c1.SetCoefficient(Cu, 1);

// Weight limit
Constraint c2 = solver.MakeConstraint(0, Weight_Max);
c2.SetCoefficient(Al, 1);
c2.SetCoefficient(Cu, 1);

SolveAndPrint(solver);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="milp-problem-knapsack"&gt;MILP Problem : Knapsack&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Knapsack_problem"&gt;knapsack problem&lt;/a&gt; defines a bag that was a maximal weight of &lt;span class="math"&gt;\(W\)&lt;/span&gt;, we can take items from a set of items each with a weight of &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; and a value of &lt;span class="math"&gt;\(v_i\)&lt;/span&gt;. Typically, the problem is defined with an &lt;span class="math"&gt;\(x_i \in \{0,1\}\)&lt;/span&gt; variable set to either 0 or 1 knapsack where each item is either taken or not.&lt;/p&gt;
&lt;p&gt;Here we are going to allow fractional parts of the items to be taken so that we can solve it as a linear problem (also known as a linear relaxation), allowing &lt;span class="math"&gt;\(x_i \in [0,1]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=Knapsack_Lp_Milp.ipynb"&gt;Launch the binder&lt;/a&gt;  &lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=Knapsack_Lp_Milp.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;//Array of items, weights and totals
int nItems = 10; 
double maxWeight = 220; 
double[] weights = {31, 27, 12, 39,  2, 69, 66, 29, 45, 58};
double[] values =  {24, 27, 26, 15, 19, 33, 30, 28, 65, 42};

Solver milp_solver = Solver.CreateSolver(&amp;quot;MILP&amp;quot;, &amp;quot;CBC_MIXED_INTEGER_PROGRAMMING&amp;quot;);

Variable[] Items = milp_solver.MakeBoolVarArray(10, &amp;quot;Items&amp;quot;);

// Maximize revenue 
Objective objective = milp_solver.Objective();
for(int i = 0; i &amp;lt; nItems; i++) objective.SetCoefficient(Items[i], values[i]);
objective.SetMaximization();

// Weight limit
Constraint c0 = milp_solver.MakeConstraint(0, maxWeight);
for(int i = 0; i &amp;lt; nItems; i++) c0.SetCoefficient(Items[i], weights[i]);

SolveAndPrint(milp_solver, nItems, weights);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are many ways of solving the knapsack problem, using LP and MILP solvers as seen here or using Dynamic Programming. The Google OR-Tools have a specific solver for multi-dimensional knapsack problems, including one which uses Dynamic Programming.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Thanks to the integration of C# into &lt;a href="https://jupyter.org/"&gt;Jupyter notebooks&lt;/a&gt; with the &lt;a href="https://github.com/dotnet/try"&gt;kernel from Donet try&lt;/a&gt; and support from the &lt;a href="https://mybinder.org/"&gt;MyBinder.org&lt;/a&gt; hosting, it's easy to share with you runnable workbooks to illustrate how to use the &lt;a href="https://developers.google.com/optimization"&gt;Google OR-Tools&lt;/a&gt; to solve the &lt;a href="https://en.wikipedia.org/wiki/Linear_programming"&gt;linear&lt;/a&gt; (LP) and &lt;a href="https://en.wikipedia.org/wiki/Integer_programming"&gt;mixed-integer linear problems&lt;/a&gt; (MILP) .&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/my-binder-jupyter-csharp</id>
		<title>Hosting your C# Jupyter notebook online by adding one file to your repo</title>
		<link href="http://ewinnington.github.io/posts/my-binder-jupyter-csharp" />
		<updated>2019-11-14T23:20:00Z</updated>
		<content>&lt;p&gt;&lt;a href="https://mybinder.org/"&gt;MyBinder.org&lt;/a&gt; in collaboration with &lt;a href="https://github.com/dotnet/try"&gt;Dotnet try&lt;/a&gt; allows you to host your .net notebooks online.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=SqliteInteraction.ipynb"&gt;SQLite example workbook: &lt;/a&gt;
&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=SqliteInteraction.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To light up this for your own hosted repositories, you will need a public github repo. Inside the repository, you will need to create a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; file that gives the setup required for MyBinder to setup the environment of the workbook.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/dotnet/try/blob/master/CreateBinder.md"&gt;dotnet/try&lt;/a&gt; has the set of instrunctions.&lt;/p&gt;
&lt;p&gt;For my repository, I used the following &lt;a href="https://github.com/ewinnington/noteb/blob/master/Dockerfile"&gt;Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A list of my changes to the standard one proposed by dotnet/try:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used a fixed docker image &lt;code&gt;jupyter/scipy-notebook:45f07a14b422&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since I have all my notebooks in the root of my repository I did &lt;code&gt;COPY . ${HOME}/Notebooks/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since I am always importing the Nuget files at the top of my workbook, I did not need to have the docker deamon add a nuget config. So I commented out the COPY command &lt;code&gt;# COPY ./NuGet.config ${HOME}/nuget.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I commented out the custom &lt;code&gt;--add-source &amp;quot;https://dotnet.myget.org/F/dotnet-try/api/v3/index.json&amp;quot;&lt;/code&gt; from the installation of the dotnet try tool, since I had issue with the nuget feed with the pre-release version. Installing with &lt;code&gt;RUN dotnet tool install -g dotnet-try&lt;/code&gt; will get you the latest released version.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-Skip"&gt;FROM jupyter/scipy-notebook:45f07a14b422

# Install .NET CLI dependencies

ARG NB_USER=jovyan
ARG NB_UID=1000
ENV USER ${NB_USER}
ENV NB_UID ${NB_UID}
ENV HOME /home/${NB_USER}

WORKDIR ${HOME}

USER root
RUN apt-get update
RUN apt-get install -y curl

# Install .NET CLI dependencies
RUN apt-get install -y --no-install-recommends \
        libc6 \
        libgcc1 \
        libgssapi-krb5-2 \
        libicu60 \
        libssl1.1 \
        libstdc++6 \
        zlib1g 

RUN rm -rf /var/lib/apt/lists/*

# Install .NET Core SDK
ENV DOTNET_SDK_VERSION 3.0.100

RUN curl -SL --output dotnet.tar.gz https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz \
    &amp;amp;&amp;amp; dotnet_sha512='766da31f9a0bcfbf0f12c91ea68354eb509ac2111879d55b656f19299c6ea1c005d31460dac7c2a4ef82b3edfea30232c82ba301fb52c0ff268d3e3a1b73d8f7' \
    &amp;amp;&amp;amp; echo &amp;quot;$dotnet_sha512 dotnet.tar.gz&amp;quot; | sha512sum -c - \
    &amp;amp;&amp;amp; mkdir -p /usr/share/dotnet \
    &amp;amp;&amp;amp; tar -zxf dotnet.tar.gz -C /usr/share/dotnet \
    &amp;amp;&amp;amp; rm dotnet.tar.gz \
    &amp;amp;&amp;amp; ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet

# Enable detection of running in a container
ENV DOTNET_RUNNING_IN_CONTAINER=true \
    # Enable correct mode for dotnet watch (only mode supported in a container)
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    # Skip extraction of XML docs - generally not useful within an image/container - helps performance
    NUGET_XMLDOC_MODE=skip \
    # Opt out of telemetry until after we install jupyter when building the image, this prevents caching of machine id
    DOTNET_TRY_CLI_TELEMETRY_OPTOUT=true

# Trigger first run experience by running arbitrary cmd
RUN dotnet help

# Copy notebooks

COPY . ${HOME}/Notebooks/

# Copy package sources

# COPY ./NuGet.config ${HOME}/nuget.config

RUN chown -R ${NB_UID} ${HOME}
USER ${USER}

# Install Microsoft.DotNet.Interactive
RUN dotnet tool install -g dotnet-try 
#--add-source &amp;quot;https://dotnet.myget.org/F/dotnet-try/api/v3/index.json&amp;quot;

ENV PATH=&amp;quot;${PATH}:${HOME}/.dotnet/tools&amp;quot;
RUN echo &amp;quot;$PATH&amp;quot;

# Install kernel specs
RUN dotnet try jupyter install

# Enable telemetry once we install jupyter for the image
ENV DOTNET_TRY_CLI_TELEMETRY_OPTOUT=false

# Set root to Notebooks
WORKDIR ${HOME}/Notebooks/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the Dockerfile is in the repository. Head over to &lt;a href="https://mybinder.org/"&gt;MyBinder.org&lt;/a&gt; and enter the link to your repository. Optionally, you can set an initial ipynb file to start when the link is clicked.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/my-binder/Binder-1.png" class="img-fluid" alt="MyBinder" /&gt;&lt;/p&gt;
&lt;p&gt;When you click &amp;quot;launch&amp;quot;, MyBinder will download your repository and start the docker build, very soon you will be able to access your binders online. Fully shareable and totally awesome!&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/my-binder/Binder-2.png" class="img-fluid" width="60%" alt="SQLite Running" /&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="https://mybinder.org/"&gt;MyBinder.org&lt;/a&gt; in collaboration with &lt;a href="https://github.com/dotnet/try"&gt;Dotnet try&lt;/a&gt; allows you to host your .net notebooks online.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-lp-10</id>
		<title>Introduction to linear programming with C# and OR-Tools inside Jupyter</title>
		<link href="http://ewinnington.github.io/posts/jupyter-lp-10" />
		<updated>2019-11-14T21:30:00Z</updated>
		<content>&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=IntroToLP.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="linear-programming"&gt;Linear programming&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Linear_programming"&gt;Linear programming&lt;/a&gt; (LP) is a method to provide an optimal solution to a problem defined by a set of linear constraints. It is very widely applied in engineering and science.&lt;/p&gt;
&lt;p&gt;A typical linear programming problem is defined by an Objective function (the target to maximise or minimise) and a set of constraints which limit the solution space.&lt;/p&gt;
&lt;h2 id="what-does-an-lp-problem-look-like"&gt;What does an LP problem look like?&lt;/h2&gt;
&lt;p&gt;We are going to start with a very simple linear problem definition. The first line of the problem describes the objective function, in this the value to maximize. In this problem, we have two variables to optimize x and y. The constraints that limit the problem's space are defined under the subject to section.&lt;/p&gt;
&lt;div class="math"&gt;
\[
\begin{aligned}
\max (2y+x) \\
\text{subject to:} \\
\qquad x \leq 15 \\
\qquad y \leq 8 
\end{aligned}
\]&lt;/div&gt;
&lt;p&gt;This very simple maximisation problem has a maximum solution of &lt;span class="math"&gt;\(x=15\)&lt;/span&gt; and &lt;span class="math"&gt;\(y=8\)&lt;/span&gt; for an objective value of &lt;span class="math"&gt;\(31\)&lt;/span&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/A1.png" class="img-fluid" width="100%" alt="A1" /&gt;&lt;/p&gt;
&lt;p&gt;There exist many linear programming solvers to calculate this optimum. We will be using &lt;a href="https://github.com/coin-or/Clp"&gt;Coin-OR project CLP&lt;/a&gt; with the &lt;a href="https://developers.google.com/optimization"&gt;Google OR-Tools&lt;/a&gt; as an interface for C#.&lt;/p&gt;
&lt;h2 id="meet-the-solver"&gt;Meet the solver&lt;/h2&gt;
&lt;p&gt;You can find my &lt;a href="https://github.com/ewinnington/noteb/blob/master/IntroToLP.ipynb"&gt;notebook with all the code here&lt;/a&gt;. And you can now access the &lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=IntroToLP.ipynb"&gt;Jupyter notebooks online, thanks to Binder&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id="coin-or-clp-with-google-or-tools"&gt;Coin-OR&lt;a id="fnref:1" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; CLP (with Google OR&lt;a id="fnref:2" href="#fn:1" class="footnote-ref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;-Tools)&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://www.coin-or.org"&gt;Coin-OR project&lt;/a&gt; provides high quality solvers for many applications with an open source license. &lt;a href="https://github.com/coin-or/Clp"&gt;CLP&lt;/a&gt; is the main linear programming solver we will be using until we start adding binary variables, at which point we will start using &lt;a href="https://github.com/coin-or/Cbc"&gt;CBC&lt;/a&gt;. To call them from C#, we could write out a format that CLP / CBC knows how to read, such as &lt;a href="https://en.wikipedia.org/wiki/MPS_(format)"&gt;MPS&lt;/a&gt; or we could use a wrapping library to call them directly from C#. We will be focusing on using the Google OR-Tools.&lt;/p&gt;
&lt;h4 id="google-or-tools"&gt;Google OR-Tools&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://developers.google.com/optimization/"&gt;Google OR-Tools&lt;/a&gt; provide us with a set of primitives with which to work with so that we can define optimisation problems and allow us to call to various solvers, including CLP, which we will be using. Also the OR-Tools provide routines to write out the problems in MPS and other formats. We will focus on using the OR Tools as soon as the introduction is over.&lt;/p&gt;
&lt;p&gt;Adding the Google OR Tools through nuget to the Jupyter notebook with the &lt;code&gt;#r&lt;/code&gt; command and &lt;code&gt;using&lt;/code&gt; in the cell imports the solver.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;#r &amp;quot;nuget:Google.OrTools&amp;quot;

using Google.OrTools.LinearSolver;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-1.png" class="img-fluid" alt="10-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;This allows us to create a solver instance as follows, note the constant &lt;code&gt;CLP_LINEAR_PROGRAMMING&lt;/code&gt; this tells us which solver we will be using.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;Solver solver = Solver.CreateSolver(&amp;quot;LinearProgramming&amp;quot;, &amp;quot;CLP_LINEAR_PROGRAMMING&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code snippet implements the linear program formulation below&lt;a id="fnref:3" href="#fn:2" class="footnote-ref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\[
\begin{aligned}
\max (2y+x) \\
\text{subject to:} \\
\qquad x \leq 15 \\
\qquad y \leq 8 
\end{aligned}
\]&lt;/div&gt;
&lt;p&gt;The solver has been already defined and initalized. We are now defining the variables of the problem, the objective function and the linear constraints that apply.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;Variable x = solver.MakeNumVar(0.0, double.PositiveInfinity, &amp;quot;x&amp;quot;);
Variable y = solver.MakeNumVar(0.0, double.PositiveInfinity, &amp;quot;y&amp;quot;);

// Maximize 2*y+x.
Objective objective = solver.Objective();
objective.SetCoefficient(x, 1);
objective.SetCoefficient(y, 2);
objective.SetMaximization();

// 0 &amp;lt;= x &amp;lt;= 15 
Constraint c0 = solver.MakeConstraint(0, 15);
c0.SetCoefficient(x, 1);

// 0 &amp;lt;= y &amp;lt;= 8
Constraint c1 = solver.MakeConstraint(0, 8);
c1.SetCoefficient(y, 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-2.png" class="img-fluid" alt="10-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;When you execute the next cells, the solver.Solve() function is called and the results will be written out to the cell's output. We will use this function cell several times over the course of the workbook.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;public void SolveProblem() {
    var resultStatus = solver.Solve();

    // Check that the problem has an optimal solution.
    if (resultStatus != Solver.ResultStatus.OPTIMAL)
    {
        Console.WriteLine(&amp;quot;The problem does not have an optimal solution!&amp;quot;);
        return;
    }

    Console.WriteLine(&amp;quot;Problem solved in &amp;quot; + solver.WallTime() + &amp;quot; milliseconds&amp;quot;);

    // The objective value of the solution.
    Console.WriteLine(&amp;quot;Optimal objective value = &amp;quot; + solver.Objective().Value());

    // The value of each variable in the solution.
    foreach (var v in solver.variables())
    { Console.WriteLine($&amp;quot;{v.Name()} : {v.SolutionValue()} &amp;quot;); };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-3.png" class="img-fluid" alt="10-3.png" /&gt;&lt;/p&gt;
&lt;h3 id="other-solvers"&gt;Other solvers&lt;/h3&gt;
&lt;p&gt;There exists many other solvers that are available, either directly wrapped through the Google OR Tools such as GLOP or another library or as external programs fed through input files in MPS or other formats. The &lt;a href="https://neos-server.org/neos/"&gt;NEOS project&lt;/a&gt; provides a thorough set of optimisation solvers that are available online with many input formats available (MPS, AMPL, Lp, GAMS).&lt;/p&gt;
&lt;h2 id="problem-2"&gt;Problem 2&lt;/h2&gt;
&lt;p&gt;We will be adding a third constraint to the formulation of Problem 1.&lt;/p&gt;
&lt;div class="math"&gt;
\[
\begin{aligned}
\text{Obj:} \max(2y+x)
\\ \text{subject to:} \quad x \leq 15
\\ \qquad \quad \quad \quad y \leq 8
\\ \quad \quad \quad x+y \leq 18
\end{aligned}
\]&lt;/div&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/A2.png" class="img-fluid" width="100%" alt="A2" /&gt;&lt;/p&gt;
&lt;p&gt;The solver is initialized with the full problem 1 defintion already, x and y are already declared. When you click run on the solver's cell, the solver.Solve() function is called and results are written out.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;Constraint c = solver.MakeConstraint(0, 18);
c.SetCoefficient(x, 1);
c.SetCoefficient(y, 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you call &lt;code&gt;SolveProblem();&lt;/code&gt;, you will now have a new optimal value that is lower that the previous one. In linear programming maximization problem, adding a new constraint will always make the optimal value lower or equal to the less constrained. problem&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-4.png" class="img-fluid" alt="10-4.png" /&gt;&lt;/p&gt;
&lt;h2 id="problem-3"&gt;Problem 3&lt;/h2&gt;
&lt;p&gt;You should now be able to add an adding a fourth constraint to the formulation of Problem 2.&lt;/p&gt;
&lt;div class="math"&gt;
\[
\begin{aligned}
\text{Obj:} \max(2y+x)
\\ \text{subject to:} \qquad x \leq 15
\\ \qquad \quad y \leq 8
\\ \quad x+y \leq 18
\\ -\frac{1}{3}x+y \leq 2
\end{aligned}
\]&lt;/div&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/A3.png" class="img-fluid" width="100%" alt="A3" /&gt;&lt;/p&gt;
&lt;p&gt;The solver is initialized with the full problem 2 defintion already, x and y are already declared. When you click on the solver's cell, the solver.Solve() function is called and results are written out.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-5.png" class="img-fluid" width="100%" alt="10-5.png" /&gt;&lt;/p&gt;
&lt;p&gt;For those following along in the &lt;a href="https://github.com/ewinnington/noteb/blob/master/IntroToLP.ipynb"&gt;notebook&lt;/a&gt; there is a hint below this section with a second implementation of the &lt;code&gt;SolveProblem()&lt;/code&gt; function which should give you hints based on your objective value.&lt;/p&gt;
&lt;h2 id="the-power-of-jupyter-special-commands"&gt;The power of Jupyter special commands&lt;/h2&gt;
&lt;p&gt;I'm discovering slowly the jupyter commands. The first command &lt;code&gt;display()&lt;/code&gt; allows you to present objects in a table. A great way to select the properties you want to show is to use linq (remember to add &lt;code&gt;using System.Linq&lt;/code&gt;) to map a list of objects to an anonymous object with the properties you want to show in the table.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;display(solver.variables().Select(a =&amp;gt; new { Name  = a.Name(), Value = a.SolutionValue() }));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/posts/images/lp/10-6.png" class="img-fluid" width="100%" alt="10-6.png" /&gt;&lt;/p&gt;
&lt;h2 id="recap"&gt;Recap&lt;/h2&gt;
&lt;p&gt;Now that we have introduced linear programming and know how to use the solver, the following chapter will cover two simple linear programming applications.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;OR here refers to &lt;a href="https://en.wikipedia.org/wiki/Operations_research"&gt;Operational Research&lt;/a&gt; - the field of mathematics dedicated to the search for optimal or near optimal solutions to problems.&lt;a href="#fnref:1" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;a href="#fnref:2" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;For those using &lt;a href="/posts/Switching-to-wyam"&gt;Wyam to generate their blogs&lt;/a&gt;, you can add the&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; id=&amp;quot;MathJax-script&amp;quot; async
src=&amp;quot;https://cdn.jsdelivr.net/npm/mathjax&amp;#64;3/es5/tex-mml-chtml.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your &lt;code&gt;_Head.cshtml&lt;/code&gt; template page. I recommend checking out &lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt; for the latest &lt;a href="http://docs.mathjax.org/en/latest/web/start.html#using-mathjax-from-a-content-delivery-network-cdn"&gt;CDN&lt;/a&gt;.&lt;a href="#fnref:3" class="footnote-back-ref"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
		<summary>&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=IntroToLP.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder"&gt;&lt;/a&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-docker-csharp-postgres</id>
		<title>Docker controlled from Jupyter Notebook C# with PostgresDB</title>
		<link href="http://ewinnington.github.io/posts/jupyter-docker-csharp-postgres" />
		<updated>2019-11-12T23:18:00Z</updated>
		<content>&lt;p&gt;In the context of Docker and Jupyter Notebook, it's interesting to note that there exists a Nuget that allows C# to control docker. So, yes, it is possible to launch a Postgresql database, on docker, inside a Jupyter notebook!&lt;/p&gt;
&lt;p&gt;This assumes you have &lt;a href="https://hub.docker.com/?overlay=onboarding"&gt;Docker&lt;/a&gt;, &lt;a href="https://github.com/dotnet/try/blob/master/DotNetTryLocal.md"&gt;Dotnet try&lt;/a&gt;, &lt;a href="https://jupyter.org/"&gt;Jupyter notebook&lt;/a&gt; and follow the setup of the &lt;a href="/posts/jupyter-notebook-csharp-r"&gt;C# kernel for Jupyter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don't want to wait, you can find my &lt;a href="https://github.com/ewinnington/noteb/blob/master/DockerInteraction.ipynb"&gt;complete notebook here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft has created a &lt;a href="https://github.com/microsoft/Docker.DotNet"&gt;C# Client library for talking to Docker&lt;/a&gt;, so we will be taking advantage of it. Much of the magic docker code is pulled from the Docker.DotNet repository.
I'm using the &lt;a href="https://www.npgsql.org/index.html"&gt;Npgsql drivers&lt;/a&gt; for accessing the PostgreSQL database.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-01.png" class="img-fluid" alt="pgsql01" /&gt;&lt;/p&gt;
&lt;p&gt;The real magic moment is when you access the Docker instance, if it is on your local machine on windows, you can use the &lt;code&gt;npipe://./pipe/docker_engine&lt;/code&gt; Uri. If you are on Linux, use &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; (at this time, I haven't tried it on linux, but if you do, please tell me).
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-02.png" class="img-fluid" alt="pgsql02" /&gt;&lt;/p&gt;
&lt;p&gt;In block 3, we select a random port to host the pgSQL database. Then list the local image names that are available (you should get postgres:latest on your machine to run this). We create and start up the container, passing the environment variables for the password, user and initial schema. Once the container is started, we detach ourselves from it, so it runs in the background. Finally, I wait until I'm pretty sure the container and database is ready (10s sleep at the end). You can reduce that sleep time. On my Surface laptop 1, I sometimes have an issue when I've got too many other containers running.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-03.png" class="img-fluid" alt="pgsql03" /&gt;&lt;/p&gt;
&lt;p&gt;I'm connecting to the database and validating the connection name.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-04.png" class="img-fluid" alt="pgsql04" /&gt;&lt;/p&gt;
&lt;p&gt;I'm creating a database schema and a user for this particular schema, then reconning with the new user.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-05.png" class="img-fluid" alt="pgsql05" /&gt;&lt;/p&gt;
&lt;p&gt;Creating a table and inserting two rows using direct strings and string concatenation. In production, you should never be using string concatenation for your SQL statements. Please always use Bound variables as described below.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-06.png" class="img-fluid" alt="pgsql06" /&gt;&lt;/p&gt;
&lt;p&gt;This is how you should interact with the PostgreSQL database if you are using direct SQL statements. You should be using Bound commands with parameters.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-07.png" class="img-fluid" alt="pgsql07" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, I check that all three insertions were successful.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-08.png" class="img-fluid" alt="pgsql08" /&gt;&lt;/p&gt;
&lt;p&gt;You can watch the container run in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;docker extension&lt;/a&gt; of &lt;a href="https://code.visualstudio.com/"&gt;Visual studio Code&lt;/a&gt;. It's a great way of monitoring what is currently running, as well as deleting old containers that might be still present.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-10.png" class="img-fluid" alt="pgsql10" /&gt;&lt;/p&gt;
&lt;p&gt;Talking of deleting old containers, this is how you shut them down and delete them at the end of the notebook. I first close the Db connection and dispose of it before asking Docker.DotNet to stop the containers.
&lt;img src="/posts/images/jupyter-notebook-csharp-r/docker-pg-09.png" class="img-fluid" alt="pgsql09" /&gt;&lt;/p&gt;
&lt;p&gt;It would be cleaner if I knew how to enfore a &lt;code&gt;Finally&lt;/code&gt; in Jupyter Notebook, but at this time, I don't know. If you do, drop me a line on &lt;a href="https://twitter.com/ThrowATwit"&gt;twitter&lt;/a&gt; or a pull request on this blog post.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;In the context of Docker and Jupyter Notebook, it's interesting to note that there exists a Nuget that allows C# to control docker. So, yes, it is possible to launch a Postgresql database, on docker, inside a Jupyter notebook!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-sqlite-csharp</id>
		<title>Testing SQLite in C# Jupyter notebook</title>
		<link href="http://ewinnington.github.io/posts/jupyter-sqlite-csharp" />
		<updated>2019-11-12T20:00:00Z</updated>
		<content>&lt;p&gt;Now that we have &lt;a href="/posts/jupyter-notebook-csharp-r"&gt;Jupyter Notebooks with C# installed&lt;/a&gt;, using it as an environment to play with SQLite is very easy. &lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is a relational database that is small in footprint and self-contained. It also has a great in-memory mode which is perfect for playing around in a Jupyter notebook.&lt;/p&gt;
&lt;p&gt;You can access my &lt;a href="https://github.com/ewinnington/noteb/blob/master/SqliteInteraction.ipynb"&gt;SQLite example notebook here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can now launch this online and follow along:
&lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=SqliteInteraction.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can create a C# Notebook from the file menu of Jupyter.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/new-notebook.png" class="img-fluid" alt="new-notebook" /&gt;&lt;/p&gt;
&lt;p&gt;We need to pull in the nuget package &lt;code&gt;System.Data.SQLite&lt;/code&gt; to interact with the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;#r &amp;quot;nuget:System.Data.SQLite&amp;quot;
using System.Data.SQLite;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#r&lt;/code&gt; is used to reference a dll or a nuget package. If you prefix the command with &amp;quot;nuget:&amp;quot; then the jupyter notebook will download the nuget and add it as a reference. Then as in usual c#, you must reference it.&lt;/p&gt;
&lt;p&gt;When you run this cell, you should see the following output:&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/sqlite01.png" class="img-fluid" alt="sqlite01" /&gt;&lt;/p&gt;
&lt;p&gt;We can then create a connection to an in-memory SQLite database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;SQLiteConnection conn;

conn = new SQLiteConnection(&amp;quot;Data Source=:memory:;Version=3;New=True;&amp;quot;);

try
{
conn.Open();
}
catch (Exception ex)
{
Console.WriteLine(ex); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creating two identical tables &lt;em&gt;SampleTable&lt;/em&gt; and &lt;em&gt;SampleTable1&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using (SQLiteCommand sqlite_cmd = conn.CreateCommand()) {
    string Createsql = &amp;quot;CREATE TABLE SampleTable(Col1 VARCHAR(20), Col2 INT)&amp;quot;;
    string Createsql1 = &amp;quot;CREATE TABLE SampleTable1(Col1 VARCHAR(20), Col2 INT)&amp;quot;;
    sqlite_cmd.CommandText = Createsql;
    sqlite_cmd.ExecuteNonQuery();
    sqlite_cmd.CommandText = Createsql1;
    sqlite_cmd.ExecuteNonQuery();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inserting a set of data into these tables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using (SQLiteCommand sqlite_cmd = conn.CreateCommand()) {
    sqlite_cmd.CommandText = &amp;quot;INSERT INTO SampleTable(Col1, Col2) VALUES ('Test Text ', 1);&amp;quot;;
    sqlite_cmd.ExecuteNonQuery();
    sqlite_cmd.CommandText = &amp;quot;INSERT INTO SampleTable(Col1, Col2) VALUES ('Test1 Text1 ', 2);&amp;quot;;
    sqlite_cmd.ExecuteNonQuery();
    sqlite_cmd.CommandText = &amp;quot;INSERT INTO SampleTable(Col1, Col2) VALUES ('Test2 Text2 ', 3);&amp;quot;;
    sqlite_cmd.ExecuteNonQuery();
    sqlite_cmd.CommandText = &amp;quot;INSERT INTO SampleTable1(Col1, Col2) VALUES ('Test3 Text3 ', 3);&amp;quot;;
    sqlite_cmd.ExecuteNonQuery();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reading from &lt;em&gt;SampleTable&lt;/em&gt; to verify the insertions went through correctly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using (SQLiteCommand sqlite_cmd = conn.CreateCommand()) {
    sqlite_cmd.CommandText = &amp;quot;SELECT * FROM SampleTable&amp;quot;;

    using(var sqlite_datareader = sqlite_cmd.ExecuteReader()){
        while (sqlite_datareader.Read())
        {
        string myreader = sqlite_datareader.GetString(0);
        Console.WriteLine(myreader);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you executed the whole workbook up to now, you should have the following output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/sqlite05.png" class="img-fluid" alt="sqlite05" /&gt;&lt;/p&gt;
&lt;p&gt;Closing the connection to the databse.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conn.Close();
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;Now that we have &lt;a href="/posts/jupyter-notebook-csharp-r"&gt;Jupyter Notebooks with C# installed&lt;/a&gt;, using it as an environment to play with SQLite is very easy. &lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; is a relational database that is small in footprint and self-contained. It also has a great in-memory mode which is perfect for playing around in a Jupyter notebook.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/jupyter-notebook-csharp-r</id>
		<title>Jupyter notebook with C# and R</title>
		<link href="http://ewinnington.github.io/posts/jupyter-notebook-csharp-r" />
		<updated>2019-11-12T19:00:00Z</updated>
		<content>&lt;p&gt;Following the release of the &lt;a href="https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/"&gt;updated dotnet try tool&lt;/a&gt;, here are my instructions for getting started.&lt;/p&gt;
&lt;h1 id="installing-jupyter-notebook-with-a-c-kernel"&gt;Installing jupyter notebook with a c# kernel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Check if you installed python with visual studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go to the start menu and start typing Python&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/python_installed.png" class="img-fluid" :height="360px" width="620px" alt="img1" /&gt;&lt;/p&gt;
&lt;p&gt;Right click on python and follow the Open File Location until you find the place where python is installed.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/python_installed_location.png" class="img-fluid" :height="360px" width="620px" alt="img2" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Or type: &lt;code&gt;where python&lt;/code&gt; in the command line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If so, add python to the PATH of your environment. On my installation, the paths to Python were as follows. I had to add the Scripts path for the pip installation to be in the command line.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64\Scripts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;install jupyter using pip which was installed with visual studio, make sure to run in an &lt;strong&gt;administrator&lt;/strong&gt; shell
&lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now get the list of installed jupyter kernels:
&lt;code&gt;jupyter kernelspec list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Available kernels:
  c:\program files (x86)\microsoft visual studio\shared\python37_64\share\jupyter\kernels\python3  
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install the latest version of .net try
&lt;code&gt;dotnet tool install dotnet-try -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finally install the .net kernel for jupyter with the command:
&lt;code&gt;dotnet try jupyter install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;test the kernel is now installed with &lt;code&gt;jupyter kernelspec list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/jupyter_kernels.png" class="img-fluid" alt="img3" /&gt;&lt;/p&gt;
&lt;h1 id="launch-jupyter-notebook"&gt;launch jupyter notebook&lt;/h1&gt;
&lt;p&gt;In the command line, type:
&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A browser window should open and the terminal should display:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Repos\noteb&amp;gt;jupyter notebook
[I 22:14:55.617 NotebookApp] JupyterLab extension loaded from c:\program files (x86)\microsoft visual studio\shared\python37_64\lib\site-packages\jupyterlab
[I 22:14:55.618 NotebookApp] JupyterLab application directory is c:\program files (x86)\microsoft visual studio\shared\python37_64\share\jupyter\lab
[I 22:14:55.625 NotebookApp] Serving notebooks from local directory: C:\Repos\noteb
[I 22:14:55.626 NotebookApp] The Jupyter Notebook is running at:
[I 22:14:55.627 NotebookApp] http://localhost:8888/?token=XXXXXXXXXXXXXXXXXXXc1ee1dfccc0a6624263d584b8ca4c
[I 22:14:55.628 NotebookApp]  or http://127.0.0.1:8888/?token=XXXXXXXXXXXXXXXXXXXc1ee1dfccc0a6624263d584b8ca4c
[I 22:14:55.629 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).  [C 22:14:55.737 NotebookApp]

    To access the notebook, open this file in a browser:
        file:///C:/Users/xxxxxx/AppData/Roaming/jupyter/runtime/nbserver-17608-open.html
    Or copy and paste one of these URLs:
        http://localhost:8888/?token=XXXXXXXXXXXXXXXXXXXc1ee1dfccc0a6624263d584b8ca4c
     or http://127.0.0.1:8888/?token=XXXXXXXXXXXXXXXXXXXc1ee1dfccc0a6624263d584b8ca4c
[I 22:15:16.852 NotebookApp] Kernel started: be6910a0-92f0-4ec0-a26c-d8274b44cd6d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main page of the Jupyter notebook allows you to see the notebooks available in the folder and to create new ones.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/jupyter_create_csharp.png" class="img-fluid" :height="360px" width="620px" alt="img4" /&gt;&lt;/p&gt;
&lt;h1 id="hello-world"&gt;Hello world&lt;/h1&gt;
&lt;p&gt;Create a new C# notebook. Then type&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;using System; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the first cell. I executed it and then typed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;Console.WriteLine(&amp;quot;Hello World&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the second cell. Executing it shows us that the C# Kernel is working.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/jupyter_hello_world_csharp.png" class="img-fluid" :height="360px" width="620px" alt="imgHello" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#r&lt;/code&gt; is used to reference a dll or a nuget package. If you prefix the command with &amp;quot;nuget:&amp;quot; then the jupyter notebook will download the nuget and add it as a reference. Then as in usual c#, you must reference it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; The C# notebook is now hosted on binder &lt;a href="https://mybinder.org/v2/gh/ewinnington/noteb/master?filepath=HelloWorld.ipynb"&gt;&lt;img src="https://mybinder.org/badge_logo.svg" class="img-fluid" alt="Binder" /&gt;&lt;/a&gt;
click to launch the environment!&lt;/p&gt;
&lt;h1 id="installing-an-r-kernel-for-jupyter-notebook"&gt;Installing an R kernel for jupyter notebook&lt;/h1&gt;
&lt;p&gt;To install R Tools for Visual Studio, install the Visual Studio Extension R Tools for Visual Studio 2019, which was in preview when I looked. Once this is installed, you must install the Microsoft R client. This option will be presented if you go to the &amp;quot;R Interactive&amp;quot; window.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/install_R_vs.png" class="img-fluid" :height="360px" width="620px" alt="img5" /&gt;&lt;/p&gt;
&lt;p&gt;I have R installed with visual studio, so I launched visual studio in &lt;strong&gt;admin mode&lt;/strong&gt; to be able to have my R directory writable, went to the R Tools menu at the top and selected &amp;quot;R Interactive&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/r_interactive_vs.png" class="img-fluid" alt="img6" /&gt;&lt;/p&gt;
&lt;p&gt;From the command line of R, I typed in the following commands. &lt;a href="https://irkernel.github.io/installation/"&gt;Installation guide R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/r_interactive_kernel_install.png" class="img-fluid" alt="img6" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-R"&gt;install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got the following output after installing the IRKernel into Jupyter &lt;code&gt;[InstallKernelSpec] Installed kernelspec ir in C:\ProgramData\jupyter\kernels\ir&lt;/code&gt;. Following this, you can check on the command line that the R kernel appears in the list of Jupyter Kernels with &lt;code&gt;jupyter kernelspec list&lt;/code&gt;, this should show the ir kernel installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Available kernels:
  ir             C:\ProgramData\jupyter\kernels\ir
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="use-r-to-show-a-some-math"&gt;Use R to show a some math&lt;/h2&gt;
&lt;p&gt;Create a new R notebook and type in the first cell:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-R"&gt;demo(plotmath)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this should show you the following long list of tables with mathematical symbols.&lt;/p&gt;
&lt;p&gt;&lt;img src="/posts/images/jupyter-notebook-csharp-r/jupyter_R.png" class="img-fluid" :height="360px" width="620px" alt="img7" /&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Following the release of the &lt;a href="https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/"&gt;updated dotnet try tool&lt;/a&gt;, here are my instructions for getting started.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>http://ewinnington.github.io/posts/bulk-inserts</id>
		<title>Using bulk inserts on databases</title>
		<link href="http://ewinnington.github.io/posts/bulk-inserts" />
		<updated>2019-11-11T00:00:00Z</updated>
		<content>&lt;p&gt;When inserting large amounts of data into databases, you should consider using the bulk functions instead of running single row INSERT commands. Single row INSERT command will usually lead to poor performance. There exists two main techniques for mutiple row insertions in databases from code and several more if you use the loader tools that accompany the database. Here I'll detail the two main methods: BulkInserts and VectorInserts.&lt;/p&gt;
&lt;h1 id="bulk-inserts-for-oracle-mssql-postgresql"&gt;Bulk Inserts for Oracle, MSSQL, Postgresql&lt;/h1&gt;
&lt;p&gt;For the examples, it is assumed that there exists an object Timeseries ts with a field IEnumerable TimeseriesData that contains Datapoints. A Datapoint has a DateTime field named t and a Decimal field named value.&lt;/p&gt;
&lt;h2 id="datatable-to-database"&gt;Datatable to Database&lt;/h2&gt;
&lt;p&gt;We setup a DataTable in memory and fill it with the data we need to insert.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;DataTable dt = new DataTable();
dt.Columns.Add(&amp;quot;IDTIMESERIES&amp;quot;, typeof(int));
dt.Columns.Add(&amp;quot;TIMEPOINT&amp;quot;, typeof(DateTime));
dt.Columns.Add(&amp;quot;VALUE1&amp;quot;, typeof(decimal));

int nRowsMaxDt = 0;
//ts being a timeseries object that contains a IEnumberable TimeSeriesData of sp (single points) 
foreach (var sp in ts.TimeSeriesData)
{
	object[] oRowDt = new object[3];
	oRowDt[0] = ts.Id; oRowDt[1] = sp.t; oRowDt[2] = (decimal)sp.value; 
	dt.Rows.Add(oRowDt); nRowsMaxDt = nRowsMaxDt + 1;
}
DumpDataTableToDB(&amp;quot;DATATIMESERIES&amp;quot;, dt, nRowsMaxDt);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The DumpDataTableToDB function is then written on a per database basis. Below you will find my examples for OracleDb, MSSQL and Postgres.&lt;/p&gt;
&lt;h3 id="oracle"&gt;Oracle:&lt;/h3&gt;
&lt;p&gt;Oracle has two sets of drivers, the Unmanaged and the Managed drivers. Your usings will be different per package.&lt;/p&gt;
&lt;p&gt;With ODP.NET Unmanaged (Drivers installed seperately - you will need to add the references manually)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;using Oracle.DataAccess.Client;
using Oracle.DataAccess.Types;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With ODP.NET Managed (Nuget Installed &lt;a href="https://www.nuget.org/packages/Oracle.ManagedDataAccess/"&gt;https://www.nuget.org/packages/Oracle.ManagedDataAccess/&lt;/a&gt; )&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the OracleBulkCopy function with Con being an open connection to the database (OracleConnection).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;public void DumpDataTableToDB(string TableName, DataTable dt, int nCount)
{
	using (OracleBulkCopy obc = new OracleBulkCopy(Con))
	{
		obc.BatchSize = nCount;
		obc.DestinationTableName = TableName;
		obc.WriteToServer(dt);
		obc.Close();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method works, but I had issues with Oracle DataGuard. So for Oracle, I do recommend using the Vectorized data insert presented below with Oracle ArrayBind.&lt;/p&gt;
&lt;h3 id="ms-sql-server"&gt;MS SQL Server&lt;/h3&gt;
&lt;p&gt;The Microsoft SQL server uses SqlBulkCopy to connect and import the data. Again here the Con represents an open connection to the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;using System.Data;
using System.Data.Common;
using System.Data.SqlClient;

public void DumpDataTableToDB(string TableName, DataTable dt, int nCount)
{
using (SqlBulkCopy bulkCopy = new SqlBulkCopy(((SqlConnection)Con).ConnectionString, SqlBulkCopyOptions.KeepNulls))
            {
                foreach (System.Data.DataColumn col in dt.Columns)
                {
                    bulkCopy.ColumnMappings.Add(col.ColumnName, col.ColumnName);
                }
                bulkCopy.DestinationTableName = TableName;
                bulkCopy.WriteToServer(dt);
            }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="postgresql"&gt;Postgresql&lt;/h3&gt;
&lt;p&gt;In Postgresql, the important part to note is the COPY ... FROM command. This allows you to provide either a file located on the DB Server or data from STDIN, passed from the client. The Format specifier allows for binary, which we are using here or text and csv. Note, the csv format is very picky, try the text format first if you are doing imports.&lt;/p&gt;
&lt;p&gt;As usual the Con represents an open database connection.&lt;/p&gt;
&lt;p&gt;You can see the implementation of this running &lt;a href="https://github.com/ewinnington/noteb/blob/master/PgBulkInsert.ipynb"&gt;in the Jupyiter notebook with C#&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;using Npgsql; // Nuget https://www.nuget.org/packages/Npgsql 

public void DumpDataTableToDB(string TableName, DataTable dt, int nCount)
{
Dictionary&amp;lt;Type, NpgsqlTypes.NpgsqlDbType&amp;gt; TypeDict = new Dictionary&amp;lt;Type, NpgsqlTypes.NpgsqlDbType&amp;gt;();

            TypeDict.Add(typeof(int), NpgsqlTypes.NpgsqlDbType.Integer);
            TypeDict.Add(typeof(double), NpgsqlTypes.NpgsqlDbType.Double);
            TypeDict.Add(typeof(decimal), NpgsqlTypes.NpgsqlDbType.Numeric);
            TypeDict.Add(typeof(string), NpgsqlTypes.NpgsqlDbType.Varchar);
            TypeDict.Add(typeof(DateTime), NpgsqlTypes.NpgsqlDbType.Timestamp);
            TypeDict.Add(typeof(char[]), NpgsqlTypes.NpgsqlDbType.Varchar);
            TypeDict.Add(typeof(Guid), NpgsqlTypes.NpgsqlDbType.Uuid);


            string sql = &amp;quot;COPY &amp;quot; + TableName + &amp;quot; ( &amp;quot;;
            foreach (System.Data.DataColumn col in dt.Columns)
            {
                sql += (col.ColumnName.ToLower() + &amp;quot;,&amp;quot;);
            }
            sql = sql.TrimEnd(',') + &amp;quot;) FROM STDIN (FORMAT BINARY)&amp;quot;;
            int nRows = dt.Rows.Count;
            using (var BulkWrite = ((Npgsql.NpgsqlConnection)Con).BeginBinaryImport(sql))
            {
                for (int idRow = 0; idRow &amp;lt; nRows; idRow++)
                {
                    BulkWrite.StartRow();
                    foreach (System.Data.DataColumn col in dt.Columns)
                    {
                        if (dt.Rows[idRow].IsNull(col))
                        {
                            BulkWrite.WriteNull();
                        }
                        else
                        {
                            if (col.DataType == typeof(string) &amp;amp;&amp;amp; string.IsNullOrEmpty(dt.Rows[idRow].Field&amp;lt;string&amp;gt;(col)))
                            {
                                BulkWrite.WriteNull();
                            }
                            else
                            {
                                BulkWrite.Write(dt.Rows[idRow][col.Ordinal], TypeDict[col.DataType]);
                            }
                        }
                    }
                    
                }
                BulkWrite.Complete();
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="alternative-method-for-oracle-array-bind-for-vector-insertion"&gt;Alternative Method for Oracle Array Bind, for Vector Insertion&lt;/h2&gt;
&lt;p&gt;This is a better method for insertions on Oracle that does not cause issues with dataguard, using arrays of data. The single INSERT command is fed with an array of data.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSharp"&gt;int nRowsCount = ts.Count(); 
int[] IDTIMESERIES = new int[nRowsCount];
DateTime[] TIMEPOINT = new DateTime[nRowsCount];
decimal[] VALUE1 = new decimal[nRowsCount];

// loading the arrays with data 
int i = 0;
foreach (var sp in ts.TimeSeriesData)
{
	IDTIMESERIES[i] = ts.Id; TIMEPOINT[i] = sp.t; VALUE1[i] = sp.value;
	i++;
}

if (nRowsCount &amp;gt; 0)
{
	OracleCommand cmdTimeDump = new OracleCommand(&amp;quot;Insert into DATATIMESERIES (IDTIMESERIES, TIMEPOINT, VALUE1) VALUES (:1, :2, :3)&amp;quot;, OraCon);
	cmdTimeDump.ArrayBindCount = nRowsCount;
	cmdTimeDump.Parameters.Add(new OracleParameter() { OracleDbType = OracleDbType.Int32, Value = IDTIMESERIES });
	cmdTimeDump.Parameters.Add(new OracleParameter() { OracleDbType = OracleDbType.Date, Value = TIMEPOINT });
	cmdTimeDump.Parameters.Add(new OracleParameter() { OracleDbType = OracleDbType.Decimal, Value = VALUE1 });
  
	cmdTimeDump.ExecuteNonQuery();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="links"&gt;Links&lt;/h1&gt;
&lt;p&gt;An excellent overview of connections to databases in .net core was published on the &lt;a href="https://devblogs.microsoft.com/dotnet/net-core-data-access/"&gt;Microsoft devblogs&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;When inserting large amounts of data into databases, you should consider using the bulk functions instead of running single row INSERT commands. Single row INSERT command will usually lead to poor performance. There exists two main techniques for mutiple row insertions in databases from code and several more if you use the loader tools that accompany the database. Here I'll detail the two main methods: BulkInserts and VectorInserts.&lt;/p&gt;</summary>
	</entry>
</feed>